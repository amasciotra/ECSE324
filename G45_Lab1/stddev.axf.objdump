
//campus.mcgill.ca/EMF/ELE/amasci1/Desktop/G45_Lab1/stddev.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
				.text
				.global _start

_start:
				LDR R4, =RESULT		//R4 points to the result location
   0:	e59f4088 	ldr	r4, [pc, #136]	; 90 <NUMBERS+0x1c>
				LDR R2, [R4, #4]	//R2 holds the number of elements in the list
   4:	e5942004 	ldr	r2, [r4, #4]
				ADD R3, R4, #8		//R3 points to the first number
   8:	e2843008 	add	r3, r4, #8
				LDR R0, [R3]		//R0 holds the first number in the list
   c:	e5930000 	ldr	r0, [r3]

00000010 <LOOP>:

LOOP:			SUBS R2, R2, #1		//decrement the loop counter
  10:	e2522001 	subs	r2, r2, #1
				BEQ DONE			//end loop if counte has reached 0
  14:	0a000005 	beq	30 <DONE>
				ADD R3, R3, #4		//R3 points to the next nmber in the list
  18:	e2833004 	add	r3, r3, #4
				LDR R1, [R3]		//R1 holds he next number in the list 
  1c:	e5931000 	ldr	r1, [r3]
				CMP R0, R1			//check if it is greater than the maximum
  20:	e1500001 	cmp	r0, r1
				BGE LOOP			//if no, branch back to the loop
  24:	aafffff9 	bge	10 <LOOP>
				MOV R0, R1			//if yes, update the current max R0 holds max
  28:	e1a00001 	mov	r0, r1
				B LOOP				//branch back to the loop
  2c:	eafffff7 	b	10 <LOOP>

00000030 <DONE>:

DONE:			LDR R2, [R4, #4]	//R2 holds the number of elements in the list
  30:	e5942004 	ldr	r2, [r4, #4]
				ADD R3, R4, #8		//R3 points to the first number
  34:	e2843008 	add	r3, r4, #8
				LDR R7, [R3]		//R0 holds the first number in the list
  38:	e5937000 	ldr	r7, [r3]

0000003c <LOOP2>:


LOOP2:			SUBS R2, R2, #1		//decrement the loop counter
  3c:	e2522001 	subs	r2, r2, #1
				BEQ DONE2			//end loop if counte has reached 0
  40:	0a000005 	beq	5c <DONE2>
				ADD R3, R3, #4		//R3 points to the next nmber in the list
  44:	e2833004 	add	r3, r3, #4
				LDR R1, [R3]		//R1 holds he next number in the list 
  48:	e5931000 	ldr	r1, [r3]
				CMP R7, R1			//check if it is less than the minimum
  4c:	e1570001 	cmp	r7, r1
				BLT LOOP2			//if no, branch back to the loop
  50:	bafffff9 	blt	3c <LOOP2>
				MOV R7, R1			//if yes, update the current min R7 holds min
  54:	e1a07001 	mov	r7, r1
				B LOOP2				//branch back to the loop
  58:	eafffff7 	b	3c <LOOP2>

0000005c <DONE2>:


DONE2:			SUBS R2, R0, R7		//subtraction max-min
  5c:	e0502007 	subs	r2, r0, r7
				LSR R2, R2, #2		//divide by 4 using right shift
  60:	e1a02122 	lsr	r2, r2, #2
				STR R2, [R4]		//store result
  64:	e5842000 	str	r2, [r4]

00000068 <END>:
				


END:			B END				//infinite loop!
  68:	eafffffe 	b	68 <END>

0000006c <RESULT>:
  6c:	00000000 	.word	0x00000000

00000070 <N>:
  70:	00000007 	.word	0x00000007

00000074 <NUMBERS>:
  74:	00000003 	.word	0x00000003
  78:	0000000c 	.word	0x0000000c
  7c:	00000005 	.word	0x00000005
  80:	00000006 	.word	0x00000006
  84:	0000000a 	.word	0x0000000a
  88:	00000008 	.word	0x00000008
  8c:	0000000f 	.word	0x0000000f
  90:	0000006c 	.word	0x0000006c
