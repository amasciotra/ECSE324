
//campus.mcgill.ca/EMF/ELE/amasci1/Desktop/G45_Lab1/sort.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start:
			LDR R4, =ISSORTED			//points to location of boolean
   0:	e59f4094 	ldr	r4, [pc, #148]	; 9c <NUMBERS+0x20>
			LDR R5, [R4]				//contains the sorted boolean
   4:	e5945000 	ldr	r5, [r4]
			LDR R2, [R4, #4]			//holds # elements
   8:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8				//location of first number
   c:	e2843008 	add	r3, r4, #8
			LDR R0, [R3]				//first number in list
  10:	e5930000 	ldr	r0, [r3]

00000014 <LOOP>:

LOOP:		CMP R5, #1					//check if list is sorted
  14:	e3550001 	cmp	r5, #1
			BEQ DONE					//end
  18:	0a000013 	beq	6c <DONE>
			MOV R5, #1					//set to true
  1c:	e3a05001 	mov	r5, #1
			LDR R2, [R4, #4]			//holds list
  20:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8				//location of first number
  24:	e2843008 	add	r3, r4, #8
			LDR R0, [R3]				//holds first number
  28:	e5930000 	ldr	r0, [r3]

0000002c <LOOP2>:

LOOP2:		SUBS R2, R2, #1				//down counter
  2c:	e2522001 	subs	r2, r2, #1
			BEQ DONE2					//exit
  30:	0a00000c 	beq	68 <DONE2>
			ADD R3, R3, #4				//R3 points to next number
  34:	e2833004 	add	r3, r3, #4
			LDR R1, [R3]				//get next number in list
  38:	e5931000 	ldr	r1, [r3]
			LDR R0, [R3, #-4]			//gets previous number
  3c:	e5130004 	ldr	r0, [r3, #-4]
			CMP R1, R0					//compare next value to previous and check if its smaller
  40:	e1510000 	cmp	r1, r0
			BGE LOOP2					//no, branch back to loop 2
  44:	aafffff8 	bge	2c <LOOP2>
			MOV R5, #0					//yes, set bool to false
  48:	e3a05000 	mov	r5, #0
			MOV R8, R1					//temp hold for swap
  4c:	e1a08001 	mov	r8, r1
			MOV R9, R0					//temp for swap
  50:	e1a09000 	mov	r9, r0
			MOV R1, R9					//swap
  54:	e1a01009 	mov	r1, r9
			MOV R0, R8					//swap
  58:	e1a00008 	mov	r0, r8
			STR R0, [R3, #-4]			//store small number
  5c:	e5030004 	str	r0, [r3, #-4]
			STR R1, [R3]				//store large number
  60:	e5831000 	str	r1, [r3]
			B LOOP						//restart from top
  64:	eaffffea 	b	14 <LOOP>

00000068 <DONE2>:

DONE2:		B LOOP						//back to top
  68:	eaffffe9 	b	14 <LOOP>

0000006c <DONE>:
DONE: 		STR R0, [R4]				//store result to memory
  6c:	e5840000 	str	r0, [r4]

00000070 <END>:


END: 		B END
  70:	eafffffe 	b	70 <END>

00000074 <ISSORTED>:
  74:	00000000 	.word	0x00000000

00000078 <N>:
  78:	00000008 	.word	0x00000008

0000007c <NUMBERS>:
  7c:	00000005 	.word	0x00000005
  80:	00000004 	.word	0x00000004
  84:	00000002 	.word	0x00000002
  88:	00000003 	.word	0x00000003
  8c:	00000001 	.word	0x00000001
  90:	00000009 	.word	0x00000009
  94:	00000006 	.word	0x00000006
  98:	0000000b 	.word	0x0000000b
  9c:	00000074 	.word	0x00000074
