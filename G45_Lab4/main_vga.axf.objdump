
//campus.mcgill.ca/EMF/ELE/amasci1/Desktop/G45_Lab4/main_vga.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 80 0a 00 00 84 0a 00 00 88 0a 00 00     @...............
  30:	8c 0a 00 00 7c 0a 00 00 90 0a 00 00 94 0a 00 00     ....|...........

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00024f 	bl	a18 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b7c 	.word	0x00000b7c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000fb8 	.word	0x00000fb8

00000124 <__cs3_heap_start_ptr>:
 124:	00000fe0 	.word	0x00000fe0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000fc0 	.word	0x00000fc0
 170:	00000fc3 	.word	0x00000fc3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000fc0 	.word	0x00000fc0
 1bc:	00000fc0 	.word	0x00000fc0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000fc0 	.word	0x00000fc0
 200:	00000000 	.word	0x00000000
 204:	00000b20 	.word	0x00000b20

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b20 	.word	0x00000b20
 250:	00000fc4 	.word	0x00000fc4
 254:	00000b80 	.word	0x00000b80
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/vga.h"


void test_char() {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e54b300d 	strb	r3, [r11, #-13]

	for(y = 0; y <= 59; y++){
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
 278:	ea000013 	b	2cc <test_char+0x70>
		for(x = 0; x <= 79; x++){
 27c:	e3a03000 	mov	r3, #0
 280:	e50b3008 	str	r3, [r11, #-8]
 284:	ea00000a 	b	2b4 <test_char+0x58>
			VGA_write_char_ASM(x, y, c++);
 288:	e55b300d 	ldrb	r3, [r11, #-13]
 28c:	e55b200d 	ldrb	r2, [r11, #-13]
 290:	e2822001 	add	r2, r2, #1
 294:	e54b200d 	strb	r2, [r11, #-13]
 298:	e51b0008 	ldr	r0, [r11, #-8]
 29c:	e51b100c 	ldr	r1, [r11, #-12]
 2a0:	e1a02003 	mov	r2, r3
 2a4:	eb0000b0 	bl	56c <VGA_write_char_ASM>
void test_char() {
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++){
		for(x = 0; x <= 79; x++){
 2a8:	e51b3008 	ldr	r3, [r11, #-8]
 2ac:	e2833001 	add	r3, r3, #1
 2b0:	e50b3008 	str	r3, [r11, #-8]
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e353004f 	cmp	r3, #79	; 0x4f
 2bc:	dafffff1 	ble	288 <test_char+0x2c>

void test_char() {
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++){
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
 2cc:	e51b300c 	ldr	r3, [r11, #-12]
 2d0:	e353003b 	cmp	r3, #59	; 0x3b
 2d4:	daffffe8 	ble	27c <test_char+0x20>
		for(x = 0; x <= 79; x++){
			VGA_write_char_ASM(x, y, c++);
		}
	}
}
 2d8:	e24bd004 	sub	sp, r11, #4
 2dc:	e8bd8800 	pop	{r11, pc}

000002e0 <test_byte>:

void test_byte() {
 2e0:	e92d4800 	push	{r11, lr}
 2e4:	e28db004 	add	r11, sp, #4
 2e8:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 2ec:	e3a03000 	mov	r3, #0
 2f0:	e54b300d 	strb	r3, [r11, #-13]

	for(y = 0; y <= 59; y++) {
 2f4:	e3a03000 	mov	r3, #0
 2f8:	e50b300c 	str	r3, [r11, #-12]
 2fc:	ea000013 	b	350 <test_byte+0x70>
		for(x = 0; x <= 79; x+=3) {
 300:	e3a03000 	mov	r3, #0
 304:	e50b3008 	str	r3, [r11, #-8]
 308:	ea00000a 	b	338 <test_byte+0x58>
			VGA_write_byte_ASM(x, y, c++);
 30c:	e55b300d 	ldrb	r3, [r11, #-13]
 310:	e55b200d 	ldrb	r2, [r11, #-13]
 314:	e2822001 	add	r2, r2, #1
 318:	e54b200d 	strb	r2, [r11, #-13]
 31c:	e51b0008 	ldr	r0, [r11, #-8]
 320:	e51b100c 	ldr	r1, [r11, #-12]
 324:	e1a02003 	mov	r2, r3
 328:	eb0000a0 	bl	5b0 <VGA_write_byte_ASM>
void test_byte() {
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++) {
		for(x = 0; x <= 79; x+=3) {
 32c:	e51b3008 	ldr	r3, [r11, #-8]
 330:	e2833003 	add	r3, r3, #3
 334:	e50b3008 	str	r3, [r11, #-8]
 338:	e51b3008 	ldr	r3, [r11, #-8]
 33c:	e353004f 	cmp	r3, #79	; 0x4f
 340:	dafffff1 	ble	30c <test_byte+0x2c>

void test_byte() {
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++) {
 344:	e51b300c 	ldr	r3, [r11, #-12]
 348:	e2833001 	add	r3, r3, #1
 34c:	e50b300c 	str	r3, [r11, #-12]
 350:	e51b300c 	ldr	r3, [r11, #-12]
 354:	e353003b 	cmp	r3, #59	; 0x3b
 358:	daffffe8 	ble	300 <test_byte+0x20>
		for(x = 0; x <= 79; x+=3) {
			VGA_write_byte_ASM(x, y, c++);
		}
	}
}
 35c:	e24bd004 	sub	sp, r11, #4
 360:	e8bd8800 	pop	{r11, pc}

00000364 <test_pixel>:

void test_pixel() {
 364:	e92d4800 	push	{r11, lr}
 368:	e28db004 	add	r11, sp, #4
 36c:	e24dd010 	sub	sp, sp, #16
	int x, y;
	unsigned short colour = 0;
 370:	e3a03000 	mov	r3, #0
 374:	e14b30be 	strh	r3, [r11, #-14]

	for(y = 0; y <= 239; y++){
 378:	e3a03000 	mov	r3, #0
 37c:	e50b300c 	str	r3, [r11, #-12]
 380:	ea000015 	b	3dc <test_pixel+0x78>
		for(x = 0; x <= 319; x++){
 384:	e3a03000 	mov	r3, #0
 388:	e50b3008 	str	r3, [r11, #-8]
 38c:	ea00000b 	b	3c0 <test_pixel+0x5c>
			VGA_draw_point_ASM(x, y, colour++);
 390:	e15b30be 	ldrh	r3, [r11, #-14]
 394:	e15b20be 	ldrh	r2, [r11, #-14]
 398:	e2822001 	add	r2, r2, #1
 39c:	e14b20be 	strh	r2, [r11, #-14]
 3a0:	e6bf3073 	sxth	r3, r3
 3a4:	e51b0008 	ldr	r0, [r11, #-8]
 3a8:	e51b100c 	ldr	r1, [r11, #-12]
 3ac:	e1a02003 	mov	r2, r3
 3b0:	eb000048 	bl	4d8 <VGA_draw_point_ASM>
void test_pixel() {
	int x, y;
	unsigned short colour = 0;

	for(y = 0; y <= 239; y++){
		for(x = 0; x <= 319; x++){
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e50b3008 	str	r3, [r11, #-8]
 3c0:	e51b2008 	ldr	r2, [r11, #-8]
 3c4:	e300313f 	movw	r3, #319	; 0x13f
 3c8:	e1520003 	cmp	r2, r3
 3cc:	daffffef 	ble	390 <test_pixel+0x2c>

void test_pixel() {
	int x, y;
	unsigned short colour = 0;

	for(y = 0; y <= 239; y++){
 3d0:	e51b300c 	ldr	r3, [r11, #-12]
 3d4:	e2833001 	add	r3, r3, #1
 3d8:	e50b300c 	str	r3, [r11, #-12]
 3dc:	e51b300c 	ldr	r3, [r11, #-12]
 3e0:	e35300ef 	cmp	r3, #239	; 0xef
 3e4:	daffffe6 	ble	384 <test_pixel+0x20>
		for(x = 0; x <= 319; x++){
			VGA_draw_point_ASM(x, y, colour++);
		}
	}
}
 3e8:	e24bd004 	sub	sp, r11, #4
 3ec:	e8bd8800 	pop	{r11, pc}

000003f0 <main>:

int main(){
 3f0:	e92d4800 	push	{r11, lr}
 3f4:	e28db004 	add	r11, sp, #4
 3f8:	e24dd008 	sub	sp, sp, #8
	int pbvalue = 0;
 3fc:	e3a03000 	mov	r3, #0
 400:	e50b3008 	str	r3, [r11, #-8]
	VGA_clear_charbuff_ASM();		//start cleared
 404:	eb000041 	bl	510 <VGA_clear_charbuff_ASM>
 408:	ea000000 	b	410 <main+0x20>

				}
			} 


					}
 40c:	e1a00000 	nop			; (mov r0, r0)
	int pbvalue = 0;
	VGA_clear_charbuff_ASM();		//start cleared
	
while(1) {
	
			if(read_PB_data_ASM() != 0){//a button is pressed, check to see which one
 410:	eb000084 	bl	628 <read_PB_data_ASM>
 414:	e1a03000 	mov	r3, r0
 418:	e3530000 	cmp	r3, #0
 41c:	0afffffa 	beq	40c <main+0x1c>
				pbvalue = 0;
 420:	e3a03000 	mov	r3, #0
 424:	e50b3008 	str	r3, [r11, #-8]
				pbvalue = read_PB_data_ASM();
 428:	eb00007e 	bl	628 <read_PB_data_ASM>
 42c:	e50b0008 	str	r0, [r11, #-8]
				if(pbvalue == 1){//0001 pb0 is pressed,
 430:	e51b3008 	ldr	r3, [r11, #-8]
 434:	e3530001 	cmp	r3, #1
 438:	1a000007 	bne	45c <main+0x6c>
					if(read_slider_switches_ASM()!=0){
 43c:	eb0000a6 	bl	6dc <read_slider_switches_ASM>
 440:	e1a03000 	mov	r3, r0
 444:	e3530000 	cmp	r3, #0
 448:	0a000001 	beq	454 <main+0x64>
						test_byte();
 44c:	ebffffa3 	bl	2e0 <test_byte>

				}
			} 


					}
 450:	eaffffed 	b	40c <main+0x1c>
				pbvalue = read_PB_data_ASM();
				if(pbvalue == 1){//0001 pb0 is pressed,
					if(read_slider_switches_ASM()!=0){
						test_byte();
						}else{
						test_char();
 454:	ebffff80 	bl	25c <test_char>

				}
			} 


					}
 458:	eaffffeb 	b	40c <main+0x1c>
					if(read_slider_switches_ASM()!=0){
						test_byte();
						}else{
						test_char();
					}
				}else if(pbvalue == 2){//0010 pb1 is pressed
 45c:	e51b3008 	ldr	r3, [r11, #-8]
 460:	e3530002 	cmp	r3, #2
 464:	1a000001 	bne	470 <main+0x80>
						test_pixel();
 468:	ebffffbd 	bl	364 <test_pixel>

				}
			} 


					}
 46c:	eaffffe6 	b	40c <main+0x1c>
						test_char();
					}
				}else if(pbvalue == 2){//0010 pb1 is pressed
						test_pixel();
						}
					else if(pbvalue == 4) {//0100 pb2 is pressed
 470:	e51b3008 	ldr	r3, [r11, #-8]
 474:	e3530004 	cmp	r3, #4
 478:	1a000001 	bne	484 <main+0x94>
						VGA_clear_charbuff_ASM();
 47c:	eb000023 	bl	510 <VGA_clear_charbuff_ASM>

				}
			} 


					}
 480:	eaffffe1 	b	40c <main+0x1c>
						test_pixel();
						}
					else if(pbvalue == 4) {//0100 pb2 is pressed
						VGA_clear_charbuff_ASM();
						
						}else if(pbvalue == 8){
 484:	e51b3008 	ldr	r3, [r11, #-8]
 488:	e3530008 	cmp	r3, #8
 48c:	1affffde 	bne	40c <main+0x1c>
						VGA_clear_pixelbuff_ASM();
 490:	eb000000 	bl	498 <VGA_clear_pixelbuff_ASM>

				}
			} 


					}
 494:	eaffffdc 	b	40c <main+0x1c>

00000498 <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM
	.global HEX_ASCII
		
VGA_clear_pixelbuff_ASM:
	PUSH {R4-R5}	
 498:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 49c:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_PIXEL_BUF_BASE
 4a0:	e3a03332 	mov	r3, #-939524096	; 0xc8000000

	MOV R0, #0
 4a4:	e3a00000 	mov	r0, #0

000004a8 <PIXEL_LOOPX>:
PIXEL_LOOPX:
	MOV R1, #0
 4a8:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1
 4ac:	e0834080 	add	r4, r3, r0, lsl #1

000004b0 <PIXEL_LOOPY>:
PIXEL_LOOPY:
	ADD R5, R4, R1, LSL #10
 4b0:	e0845501 	add	r5, r4, r1, lsl #10
	
	STRH R2, [R5]
 4b4:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 4b8:	e2811001 	add	r1, r1, #1
	CMP R1, #240
 4bc:	e35100f0 	cmp	r1, #240	; 0xf0
	BLT PIXEL_LOOPY
 4c0:	bafffffa 	blt	4b0 <PIXEL_LOOPY>
	
	ADD R0, R0, #1
 4c4:	e2800001 	add	r0, r0, #1
	CMP R0, #320
 4c8:	e3500d05 	cmp	r0, #320	; 0x140
	BLT PIXEL_LOOPX
 4cc:	bafffff5 	blt	4a8 <PIXEL_LOOPX>

	POP {R4-R5}
 4d0:	e8bd0030 	pop	{r4, r5}
	BX LR
 4d4:	e12fff1e 	bx	lr

000004d8 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
	LDR R3, =319
 4d8:	e59f3140 	ldr	r3, [pc, #320]	; 620 <HEX_ASCII+0x10>
	CMP R0, #0
 4dc:	e3500000 	cmp	r0, #0
	BXLT LR
 4e0:	b12fff1e 	bxlt	lr
	CMP R1, #0
 4e4:	e3510000 	cmp	r1, #0
	BXLT LR
 4e8:	b12fff1e 	bxlt	lr
	CMP R0, R3
 4ec:	e1500003 	cmp	r0, r3
	BXGT LR
 4f0:	c12fff1e 	bxgt	lr
	CMP R1, #239
 4f4:	e35100ef 	cmp	r1, #239	; 0xef
	BXGT LR
 4f8:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_PIXEL_BUF_BASE
 4fc:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	ADD R3, R3, R0, LSL #1
 500:	e0833080 	add	r3, r3, r0, lsl #1
	ADD R3, R3, R1, LSL #10
 504:	e0833501 	add	r3, r3, r1, lsl #10
	STRH R2, [R3]
 508:	e1c320b0 	strh	r2, [r3]
	BX LR
 50c:	e12fff1e 	bx	lr

00000510 <VGA_clear_charbuff_ASM>:
	
VGA_clear_charbuff_ASM:
	
	PUSH {R1-R12,LR}
 510:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	LDR R0, =VGA_CHAR_BUF_BASE	//get address
 514:	e3a004c9 	mov	r0, #-922746880	; 0xc9000000
	LDR R1, [R0]				//load the register
 518:	e5901000 	ldr	r1, [r0]
	MOV R2, #79 //max value x can be, will be used as counter
 51c:	e3a0204f 	mov	r2, #79	; 0x4f
	MOV R3, #59	//max value y can be, will be used as counter decrementing
 520:	e3a0303b 	mov	r3, #59	; 0x3b
	MOV R4, #0x0	//to clear 
 524:	e3a04000 	mov	r4, #0

00000528 <CLEARcharY>:

CLEARcharY:			//actually clears everything
	
	CMP R3, #0		//exit if gone through every y position
 528:	e3530000 	cmp	r3, #0
	BLT	CLEARcharX	//go to clear the x's
 52c:	ba000007 	blt	550 <CLEARcharX>
	MOV R6, R3		//keep y counter value in R3 so doesnt fuck up
 530:	e1a06003 	mov	r6, r3
	LSL R6, #7		//skip the x bits in register, go directly to Y bits
 534:	e1a06386 	lsl	r6, r6, #7
	ORR R6, R6, R0		//adding the clearing pixel to what is in register to clear, making halfword
 538:	e1866000 	orr	r6, r6, r0
	MOV R5, R2		//saving x counter so dont fuck up, no need to shift
 53c:	e1a05002 	mov	r5, r2
	ORR R6, R6, R5		//make halfword of x and y
 540:	e1866005 	orr	r6, r6, r5
	STRB R4, [R6]	//store 0s into R6
 544:	e5c64000 	strb	r4, [r6]
	SUB R3, R3, #1	//decrement counter
 548:	e2433001 	sub	r3, r3, #1
	B CLEARcharY
 54c:	eafffff5 	b	528 <CLEARcharY>

00000550 <CLEARcharX>:

CLEARcharX:
	CMP R2, #0		//check to see if gone through all x's
 550:	e3520000 	cmp	r2, #0
	BLT ENDCLEARBUFF	//if it has go to end of clear to pop and bx lr
 554:	ba000002 	blt	564 <ENDCLEARBUFF>
	SUB R2, R2, #1		//decrement before going through the clea
 558:	e2422001 	sub	r2, r2, #1
	MOV R3, #59		//make the Y counter to 59 so it can keep going through the clearchary loop
 55c:	e3a0303b 	mov	r3, #59	; 0x3b
	B CLEARcharY	//go to clear x and ys
 560:	eafffff0 	b	528 <CLEARcharY>

00000564 <ENDCLEARBUFF>:

ENDCLEARBUFF:

	POP {R1-R12,LR}
 564:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	BX LR
 568:	e12fff1e 	bx	lr

0000056c <VGA_write_char_ASM>:

VGA_write_char_ASM:

	PUSH {R4-R12,LR}
 56c:	e92d5ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	LDR R4,=VGA_CHAR_BUF_BASE	//getting charbuff register
 570:	e3a044c9 	mov	r4, #-922746880	; 0xc9000000
	CMP R0, #0	//check to see the x coordinate falls within range
 574:	e3500000 	cmp	r0, #0
	BLT DONEWRITECHAR
 578:	ba00000a 	blt	5a8 <DONEWRITECHAR>
	CMP	R0, #79
 57c:	e350004f 	cmp	r0, #79	; 0x4f
	BGT DONEWRITECHAR
 580:	ca000008 	bgt	5a8 <DONEWRITECHAR>

	CMP R1, #0	//checking y coordinates
 584:	e3510000 	cmp	r1, #0
	BLT DONEWRITECHAR
 588:	ba000006 	blt	5a8 <DONEWRITECHAR>
	CMP R1, #59
 58c:	e351003b 	cmp	r1, #59	; 0x3b
	BGT DONEWRITECHAR
 590:	ca000004 	bgt	5a8 <DONEWRITECHAR>

	
	ORR R4, R4, R0	//add x offset
 594:	e1844000 	orr	r4, r4, r0
	MOV R5, R1	//moving y offset into another register
 598:	e1a05001 	mov	r5, r1
	LSL R5, #8	//go into y bits position
 59c:	e1a05405 	lsl	r5, r5, #8
	ORR R5, R5, R4	//adding y offset into bits
 5a0:	e1855004 	orr	r5, r5, r4
	STRB R2, [R5]
 5a4:	e5c52000 	strb	r2, [r5]

000005a8 <DONEWRITECHAR>:
	
DONEWRITECHAR:
	
	POP {R4-R12,LR}
 5a8:	e8bd5ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	BX LR
 5ac:	e12fff1e 	bx	lr

000005b0 <VGA_write_byte_ASM>:
	
VGA_write_byte_ASM:
	

	PUSH {R4-R12,LR}
 5b0:	e92d5ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	LDR R4,=VGA_CHAR_BUF_BASE	//getting charbuff register
 5b4:	e3a044c9 	mov	r4, #-922746880	; 0xc9000000
	CMP R0, #0	//check to see the x coordinate falls within range
 5b8:	e3500000 	cmp	r0, #0
	BLT DONEWRITEBYTE
 5bc:	ba000011 	blt	608 <DONEWRITEBYTE>
	CMP	R0, #79
 5c0:	e350004f 	cmp	r0, #79	; 0x4f
	BGT DONEWRITEBYTE
 5c4:	ca00000f 	bgt	608 <DONEWRITEBYTE>

	CMP R1, #0	//checking y coordinates
 5c8:	e3510000 	cmp	r1, #0
	BLT DONEWRITEBYTE
 5cc:	ba00000d 	blt	608 <DONEWRITEBYTE>
	CMP R1, #59
 5d0:	e351003b 	cmp	r1, #59	; 0x3b
	BGT DONEWRITEBYTE
 5d4:	ca00000b 	bgt	608 <DONEWRITEBYTE>
	
	LDR R12, =HEX_ASCII
 5d8:	e59fc044 	ldr	r12, [pc, #68]	; 624 <HEX_ASCII+0x14>
	AND R10, R2, #0xF0	//getting the first character
 5dc:	e202a0f0 	and	r10, r2, #240	; 0xf0
	LSR R10, #4		//moving back 4 bits over because and from the AND
 5e0:	e1a0a22a 	lsr	r10, r10, #4
	LDRB R10, [R12,R10]
 5e4:	e7dca00a 	ldrb	r10, [r12, r10]

	AND R11, R2, #0x0F	//getting second character	//no need to shift
 5e8:	e202b00f 	and	r11, r2, #15
	LDRB R11, [R12, R11]
 5ec:	e7dcb00b 	ldrb	r11, [r12, r11]
	
	ORR R4, R4, R0	//add x offset
 5f0:	e1844000 	orr	r4, r4, r0
	MOV R5, R1	//moving y offset into another register
 5f4:	e1a05001 	mov	r5, r1
	LSL R5, #8	//go into y bits position
 5f8:	e1a05405 	lsl	r5, r5, #8
	ORR R5, R5, R4	//adding y offset into bits
 5fc:	e1855004 	orr	r5, r5, r4
	
	STRB R10, [R5]	//store first
 600:	e5c5a000 	strb	r10, [r5]
	STRB R11, [R5,#1]	//store second next to it
 604:	e5c5b001 	strb	r11, [r5, #1]

00000608 <DONEWRITEBYTE>:

DONEWRITEBYTE:
	
	POP {R4-R12,LR}
 608:	e8bd5ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	BX LR
 60c:	e12fff1e 	bx	lr

00000610 <HEX_ASCII>:
 610:	33323130 	.word	0x33323130
 614:	37363534 	.word	0x37363534
 618:	42413938 	.word	0x42413938
 61c:	46454443 	.word	0x46454443

	POP {R4-R5}
	BX LR

VGA_draw_point_ASM:
	LDR R3, =319
 620:	0000013f 	.word	0x0000013f
	CMP R1, #0	//checking y coordinates
	BLT DONEWRITEBYTE
	CMP R1, #59
	BGT DONEWRITEBYTE
	
	LDR R12, =HEX_ASCII
 624:	00000610 	.word	0x00000610

00000628 <read_PB_data_ASM>:
			.global PB_clear_edgecap_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM


read_PB_data_ASM: 	PUSH {R1-R4}				//convention
 628:	e92d001e 	push	{r1, r2, r3, r4}
					LDR R1, =PB_BASEDATA		//loading memory location of data register
 62c:	e59f109c 	ldr	r1, [pc, #156]	; 6d0 <disable_PB_INT_ASM+0x20>
					LDR R0, [R1]			//getting value of keys level triggered and storing into R0
 630:	e5910000 	ldr	r0, [r1]
					POP	{R1-R4}				//convention
 634:	e8bd001e 	pop	{r1, r2, r3, r4}
					BX	LR
 638:	e12fff1e 	bx	lr

0000063c <PB_data_is_pressed_ASM>:



PB_data_is_pressed_ASM:		PUSH {R1-R12,LR}
 63c:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEDATA
 640:	e59f1088 	ldr	r1, [pc, #136]	; 6d0 <disable_PB_INT_ASM+0x20>
							LDR R2, [R1]
 644:	e5912000 	ldr	r2, [r1]
							AND R0, R0, R2	//checking if its actually pressed
 648:	e0000002 	and	r0, r0, r2
							POP {R1-R12,LR}
 64c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
 650:	e12fff1e 	bx	lr

00000654 <read_PB_edgecap_ASM>:
							
read_PB_edgecap_ASM:		PUSH {R1-R12,LR}
 654:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEEDGECAP		//goign to edgecap register
 658:	e59f1074 	ldr	r1, [pc, #116]	; 6d4 <disable_PB_INT_ASM+0x24>
							LDR R0, [R1]
 65c:	e5910000 	ldr	r0, [r1]
							POP {R1-R12,LR}
 660:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
 664:	e12fff1e 	bx	lr

00000668 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:	PUSH {R1-R12,LR}
 668:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEEDGECAP
 66c:	e59f1060 	ldr	r1, [pc, #96]	; 6d4 <disable_PB_INT_ASM+0x24>
							LDR R2, [R1]
 670:	e5912000 	ldr	r2, [r1]
							AND R0, R0, R2
 674:	e0000002 	and	r0, r0, r2
							POP {R1-R12,LR}
 678:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
 67c:	e12fff1e 	bx	lr

00000680 <PB_clear_edgecap_ASM>:
							

PB_clear_edgecap_ASM:		PUSH {R0-R12,LR}
 680:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEEDGECAP
 684:	e59f1048 	ldr	r1, [pc, #72]	; 6d4 <disable_PB_INT_ASM+0x24>
							STR R0, [R1]		//putting clear into the edgecap register
 688:	e5810000 	str	r0, [r1]
							POP {R0-R12,LR}
 68c:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
 690:	e12fff1e 	bx	lr

00000694 <enable_PB_INT_ASM>:



enable_PB_INT_ASM:			PUSH {R0-R12,LR}
 694:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEINTERRUPT
 698:	e59f1038 	ldr	r1, [pc, #56]	; 6d8 <disable_PB_INT_ASM+0x28>
							LDR R2, [R1]
 69c:	e5912000 	ldr	r2, [r1]
							ORR R0, R0, R2		//enable the interrupt to 1 so it can accept interrupts
 6a0:	e1800002 	orr	r0, r0, r2
							STR R0, [R1]
 6a4:	e5810000 	str	r0, [r1]
							POP {R0-R12,LR}
 6a8:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
 6ac:	e12fff1e 	bx	lr

000006b0 <disable_PB_INT_ASM>:


disable_PB_INT_ASM:			PUSH {R1-R12,LR}
 6b0:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEINTERRUPT
 6b4:	e59f101c 	ldr	r1, [pc, #28]	; 6d8 <disable_PB_INT_ASM+0x28>
							LDR R2, [R1]
 6b8:	e5912000 	ldr	r2, [r1]
							EOR R0, R0, #0xF 	//exclusive OR with 1111 to invert only 0 bits to 1
 6bc:	e220000f 	eor	r0, r0, #15
							AND R2, R2, R0		//bitclear
 6c0:	e0022000 	and	r2, r2, r0
							STR R2, [R1]
 6c4:	e5812000 	str	r2, [r1]
							POP {R1-R12,LR}
 6c8:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
 6cc:	e12fff1e 	bx	lr
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM


read_PB_data_ASM: 	PUSH {R1-R4}				//convention
					LDR R1, =PB_BASEDATA		//loading memory location of data register
 6d0:	ff200050 	.word	0xff200050
							AND R0, R0, R2	//checking if its actually pressed
							POP {R1-R12,LR}
							BX LR
							
read_PB_edgecap_ASM:		PUSH {R1-R12,LR}
							LDR R1, =PB_BASEEDGECAP		//goign to edgecap register
 6d4:	ff20005c 	.word	0xff20005c
							BX LR



enable_PB_INT_ASM:			PUSH {R0-R12,LR}
							LDR R1, =PB_BASEINTERRUPT
 6d8:	ff200058 	.word	0xff200058

000006dc <read_slider_switches_ASM>:
			.equ SW_BASE, 0xFF200040			
			.global read_slider_switches_ASM

read_slider_switches_ASM:
			
			LDR R1, =SW_BASE
 6dc:	e59f1004 	ldr	r1, [pc, #4]	; 6e8 <read_slider_switches_ASM+0xc>
			LDR R0, [R1]
 6e0:	e5910000 	ldr	r0, [r1]
			BX LR
 6e4:	e12fff1e 	bx	lr
			.equ SW_BASE, 0xFF200040			
			.global read_slider_switches_ASM

read_slider_switches_ASM:
			
			LDR R1, =SW_BASE
 6e8:	ff200040 	.word	0xff200040

000006ec <atexit>:
 6ec:	e1a01000 	mov	r1, r0
 6f0:	e3a00000 	mov	r0, #0
 6f4:	e92d4008 	push	{r3, lr}
 6f8:	e1a02000 	mov	r2, r0
 6fc:	e1a03000 	mov	r3, r0
 700:	eb00000e 	bl	740 <__register_exitproc>
 704:	e8bd4008 	pop	{r3, lr}
 708:	e12fff1e 	bx	lr

0000070c <exit>:
 70c:	e92d4008 	push	{r3, lr}
 710:	e3a01000 	mov	r1, #0
 714:	e1a04000 	mov	r4, r0
 718:	eb000045 	bl	834 <__call_exitprocs>
 71c:	e59f3018 	ldr	r3, [pc, #24]	; 73c <exit+0x30>
 720:	e5930000 	ldr	r0, [r3]
 724:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 728:	e3530000 	cmp	r3, #0
 72c:	11a0e00f 	movne	lr, pc
 730:	112fff13 	bxne	r3
 734:	e1a00004 	mov	r0, r4
 738:	eb0000c9 	bl	a64 <_exit>
 73c:	00000b24 	.word	0x00000b24

00000740 <__register_exitproc>:
 740:	e59fc0e4 	ldr	r12, [pc, #228]	; 82c <__register_exitproc+0xec>
 744:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 748:	e59c4000 	ldr	r4, [r12]
 74c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 750:	e35c0000 	cmp	r12, #0
 754:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 758:	e59c5004 	ldr	r5, [r12, #4]
 75c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 760:	e355001f 	cmp	r5, #31
 764:	e24dd010 	sub	sp, sp, #16
 768:	e1a06000 	mov	r6, r0
 76c:	da000015 	ble	7c8 <__register_exitproc+0x88>
 770:	e59f00b8 	ldr	r0, [pc, #184]	; 830 <__register_exitproc+0xf0>
 774:	e3500000 	cmp	r0, #0
 778:	1a000001 	bne	784 <__register_exitproc+0x44>
 77c:	e3e00000 	mvn	r0, #0
 780:	ea000018 	b	7e8 <__register_exitproc+0xa8>
 784:	e3a00e19 	mov	r0, #400	; 0x190
 788:	e58d100c 	str	r1, [sp, #12]
 78c:	e58d2008 	str	r2, [sp, #8]
 790:	e58d3004 	str	r3, [sp, #4]
 794:	e320f000 	nop	{0}
 798:	e250c000 	subs	r12, r0, #0
 79c:	e59d100c 	ldr	r1, [sp, #12]
 7a0:	e59d2008 	ldr	r2, [sp, #8]
 7a4:	e59d3004 	ldr	r3, [sp, #4]
 7a8:	0afffff3 	beq	77c <__register_exitproc+0x3c>
 7ac:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 7b0:	e3a00000 	mov	r0, #0
 7b4:	e58c0004 	str	r0, [r12, #4]
 7b8:	e58c5000 	str	r5, [r12]
 7bc:	e584c148 	str	r12, [r4, #328]	; 0x148
 7c0:	e58c0188 	str	r0, [r12, #392]	; 0x188
 7c4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 7c8:	e3560000 	cmp	r6, #0
 7cc:	e59c4004 	ldr	r4, [r12, #4]
 7d0:	1a000007 	bne	7f4 <__register_exitproc+0xb4>
 7d4:	e2843002 	add	r3, r4, #2
 7d8:	e2844001 	add	r4, r4, #1
 7dc:	e78c1103 	str	r1, [r12, r3, lsl #2]
 7e0:	e58c4004 	str	r4, [r12, #4]
 7e4:	e3a00000 	mov	r0, #0
 7e8:	e28dd010 	add	sp, sp, #16
 7ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 7f0:	e12fff1e 	bx	lr
 7f4:	e3a00001 	mov	r0, #1
 7f8:	e1a00410 	lsl	r0, r0, r4
 7fc:	e08c8104 	add	r8, r12, r4, lsl #2
 800:	e3560002 	cmp	r6, #2
 804:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 808:	e5883108 	str	r3, [r8, #264]	; 0x108
 80c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 810:	e1877000 	orr	r7, r7, r0
 814:	01830000 	orreq	r0, r3, r0
 818:	e1a05008 	mov	r5, r8
 81c:	e5882088 	str	r2, [r8, #136]	; 0x88
 820:	e58c7188 	str	r7, [r12, #392]	; 0x188
 824:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 828:	eaffffe9 	b	7d4 <__register_exitproc+0x94>
 82c:	00000b24 	.word	0x00000b24
 830:	00000000 	.word	0x00000000

00000834 <__call_exitprocs>:
 834:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 838:	e59f3168 	ldr	r3, [pc, #360]	; 9a8 <__call_exitprocs+0x174>
 83c:	e5933000 	ldr	r3, [r3]
 840:	e24dd014 	sub	sp, sp, #20
 844:	e58d3004 	str	r3, [sp, #4]
 848:	e2833f52 	add	r3, r3, #328	; 0x148
 84c:	e58d0008 	str	r0, [sp, #8]
 850:	e58d300c 	str	r3, [sp, #12]
 854:	e1a07001 	mov	r7, r1
 858:	e3a08001 	mov	r8, #1
 85c:	e59d3004 	ldr	r3, [sp, #4]
 860:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 864:	e3560000 	cmp	r6, #0
 868:	e59db00c 	ldr	r11, [sp, #12]
 86c:	0a000033 	beq	940 <__call_exitprocs+0x10c>
 870:	e5965004 	ldr	r5, [r6, #4]
 874:	e2554001 	subs	r4, r5, #1
 878:	5286a088 	addpl	r10, r6, #136	; 0x88
 87c:	5285501f 	addpl	r5, r5, #31
 880:	508a5105 	addpl	r5, r10, r5, lsl #2
 884:	5a000007 	bpl	8a8 <__call_exitprocs+0x74>
 888:	ea000029 	b	934 <__call_exitprocs+0x100>
 88c:	e5953000 	ldr	r3, [r5]
 890:	e1530007 	cmp	r3, r7
 894:	0a000005 	beq	8b0 <__call_exitprocs+0x7c>
 898:	e2444001 	sub	r4, r4, #1
 89c:	e3740001 	cmn	r4, #1
 8a0:	e2455004 	sub	r5, r5, #4
 8a4:	0a000022 	beq	934 <__call_exitprocs+0x100>
 8a8:	e3570000 	cmp	r7, #0
 8ac:	1afffff6 	bne	88c <__call_exitprocs+0x58>
 8b0:	e5963004 	ldr	r3, [r6, #4]
 8b4:	e06a2005 	rsb	r2, r10, r5
 8b8:	e2433001 	sub	r3, r3, #1
 8bc:	e0862002 	add	r2, r6, r2
 8c0:	e1530004 	cmp	r3, r4
 8c4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 8c8:	13a01000 	movne	r1, #0
 8cc:	05864004 	streq	r4, [r6, #4]
 8d0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 8d4:	e3530000 	cmp	r3, #0
 8d8:	0affffee 	beq	898 <__call_exitprocs+0x64>
 8dc:	e1a02418 	lsl	r2, r8, r4
 8e0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 8e4:	e1120001 	tst	r2, r1
 8e8:	e5969004 	ldr	r9, [r6, #4]
 8ec:	0a000016 	beq	94c <__call_exitprocs+0x118>
 8f0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 8f4:	e1120001 	tst	r2, r1
 8f8:	1a000016 	bne	958 <__call_exitprocs+0x124>
 8fc:	e59d0008 	ldr	r0, [sp, #8]
 900:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 904:	e1a0e00f 	mov	lr, pc
 908:	e12fff13 	bx	r3
 90c:	e5963004 	ldr	r3, [r6, #4]
 910:	e1530009 	cmp	r3, r9
 914:	1affffd0 	bne	85c <__call_exitprocs+0x28>
 918:	e59b3000 	ldr	r3, [r11]
 91c:	e1530006 	cmp	r3, r6
 920:	1affffcd 	bne	85c <__call_exitprocs+0x28>
 924:	e2444001 	sub	r4, r4, #1
 928:	e3740001 	cmn	r4, #1
 92c:	e2455004 	sub	r5, r5, #4
 930:	1affffdc 	bne	8a8 <__call_exitprocs+0x74>
 934:	e59f1070 	ldr	r1, [pc, #112]	; 9ac <__call_exitprocs+0x178>
 938:	e3510000 	cmp	r1, #0
 93c:	1a000009 	bne	968 <__call_exitprocs+0x134>
 940:	e28dd014 	add	sp, sp, #20
 944:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 948:	e12fff1e 	bx	lr
 94c:	e1a0e00f 	mov	lr, pc
 950:	e12fff13 	bx	r3
 954:	eaffffec 	b	90c <__call_exitprocs+0xd8>
 958:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 95c:	e1a0e00f 	mov	lr, pc
 960:	e12fff13 	bx	r3
 964:	eaffffe8 	b	90c <__call_exitprocs+0xd8>
 968:	e5963004 	ldr	r3, [r6, #4]
 96c:	e3530000 	cmp	r3, #0
 970:	e5963000 	ldr	r3, [r6]
 974:	1a000008 	bne	99c <__call_exitprocs+0x168>
 978:	e3530000 	cmp	r3, #0
 97c:	0a000006 	beq	99c <__call_exitprocs+0x168>
 980:	e1a00006 	mov	r0, r6
 984:	e58b3000 	str	r3, [r11]
 988:	e320f000 	nop	{0}
 98c:	e59b6000 	ldr	r6, [r11]
 990:	e3560000 	cmp	r6, #0
 994:	1affffb5 	bne	870 <__call_exitprocs+0x3c>
 998:	eaffffe8 	b	940 <__call_exitprocs+0x10c>
 99c:	e1a0b006 	mov	r11, r6
 9a0:	e1a06003 	mov	r6, r3
 9a4:	eafffff9 	b	990 <__call_exitprocs+0x15c>
 9a8:	00000b24 	.word	0x00000b24
 9ac:	00000000 	.word	0x00000000

000009b0 <register_fini>:
 9b0:	e92d4008 	push	{r3, lr}
 9b4:	e59f3010 	ldr	r3, [pc, #16]	; 9cc <register_fini+0x1c>
 9b8:	e3530000 	cmp	r3, #0
 9bc:	159f000c 	ldrne	r0, [pc, #12]	; 9d0 <register_fini+0x20>
 9c0:	1bffff49 	blne	6ec <atexit>
 9c4:	e8bd4008 	pop	{r3, lr}
 9c8:	e12fff1e 	bx	lr
 9cc:	00000b4c 	.word	0x00000b4c
 9d0:	000009d4 	.word	0x000009d4

000009d4 <__libc_fini_array>:
 9d4:	e92d4038 	push	{r3, r4, r5, lr}
 9d8:	e59f5030 	ldr	r5, [pc, #48]	; a10 <__libc_fini_array+0x3c>
 9dc:	e59f4030 	ldr	r4, [pc, #48]	; a14 <__libc_fini_array+0x40>
 9e0:	e0654004 	rsb	r4, r5, r4
 9e4:	e1b04144 	asrs	r4, r4, #2
 9e8:	10855104 	addne	r5, r5, r4, lsl #2
 9ec:	0a000004 	beq	a04 <__libc_fini_array+0x30>
 9f0:	e5353004 	ldr	r3, [r5, #-4]!
 9f4:	e1a0e00f 	mov	lr, pc
 9f8:	e12fff13 	bx	r3
 9fc:	e2544001 	subs	r4, r4, #1
 a00:	1afffffa 	bne	9f0 <__libc_fini_array+0x1c>
 a04:	eb000050 	bl	b4c <__libc_fini>
 a08:	e8bd4038 	pop	{r3, r4, r5, lr}
 a0c:	e12fff1e 	bx	lr
 a10:	00000b64 	.word	0x00000b64
 a14:	00000b68 	.word	0x00000b68

00000a18 <__cs3_premain>:
 a18:	e92d4008 	push	{r3, lr}
 a1c:	eb00001d 	bl	a98 <__libc_init_array>
 a20:	e59f3030 	ldr	r3, [pc, #48]	; a58 <__cs3_premain+0x40>
 a24:	e3530000 	cmp	r3, #0
 a28:	15930000 	ldrne	r0, [r3]
 a2c:	01a00003 	moveq	r0, r3
 a30:	e59f3024 	ldr	r3, [pc, #36]	; a5c <__cs3_premain+0x44>
 a34:	e3530000 	cmp	r3, #0
 a38:	15931000 	ldrne	r1, [r3]
 a3c:	01a01003 	moveq	r1, r3
 a40:	e3a02000 	mov	r2, #0
 a44:	ebfffe69 	bl	3f0 <main>
 a48:	e59f3010 	ldr	r3, [pc, #16]	; a60 <__cs3_premain+0x48>
 a4c:	e3530000 	cmp	r3, #0
 a50:	1bffff2d 	blne	70c <exit>
 a54:	eafffffe 	b	a54 <__cs3_premain+0x3c>
	...
 a60:	0000070c 	.word	0x0000070c

00000a64 <_exit>:
 a64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a68:	e3a00018 	mov	r0, #24
 a6c:	e59f1004 	ldr	r1, [pc, #4]	; a78 <_exit+0x14>
 a70:	ef123456 	svc	0x00123456
 a74:	eafffffe 	b	a74 <_exit+0x10>
 a78:	00020026 	.word	0x00020026

00000a7c <__cs3_isr_interrupt>:
 a7c:	eafffffe 	b	a7c <__cs3_isr_interrupt>

00000a80 <__cs3_isr_undef>:
 a80:	eafffffe 	b	a80 <__cs3_isr_undef>

00000a84 <__cs3_isr_swi>:
 a84:	eafffffe 	b	a84 <__cs3_isr_swi>

00000a88 <__cs3_isr_pabort>:
 a88:	eafffffe 	b	a88 <__cs3_isr_pabort>

00000a8c <__cs3_isr_dabort>:
 a8c:	eafffffe 	b	a8c <__cs3_isr_dabort>

00000a90 <__cs3_isr_irq>:
 a90:	eafffffe 	b	a90 <__cs3_isr_irq>

00000a94 <__cs3_isr_fiq>:
 a94:	eafffffe 	b	a94 <__cs3_isr_fiq>

00000a98 <__libc_init_array>:
 a98:	e92d4070 	push	{r4, r5, r6, lr}
 a9c:	e59f506c 	ldr	r5, [pc, #108]	; b10 <__libc_init_array+0x78>
 aa0:	e59f606c 	ldr	r6, [pc, #108]	; b14 <__libc_init_array+0x7c>
 aa4:	e0656006 	rsb	r6, r5, r6
 aa8:	e1b06146 	asrs	r6, r6, #2
 aac:	12455004 	subne	r5, r5, #4
 ab0:	13a04000 	movne	r4, #0
 ab4:	0a000005 	beq	ad0 <__libc_init_array+0x38>
 ab8:	e5b53004 	ldr	r3, [r5, #4]!
 abc:	e2844001 	add	r4, r4, #1
 ac0:	e1a0e00f 	mov	lr, pc
 ac4:	e12fff13 	bx	r3
 ac8:	e1560004 	cmp	r6, r4
 acc:	1afffff9 	bne	ab8 <__libc_init_array+0x20>
 ad0:	e59f5040 	ldr	r5, [pc, #64]	; b18 <__libc_init_array+0x80>
 ad4:	e59f6040 	ldr	r6, [pc, #64]	; b1c <__libc_init_array+0x84>
 ad8:	e0656006 	rsb	r6, r5, r6
 adc:	eb000012 	bl	b2c <_init>
 ae0:	e1b06146 	asrs	r6, r6, #2
 ae4:	12455004 	subne	r5, r5, #4
 ae8:	13a04000 	movne	r4, #0
 aec:	0a000005 	beq	b08 <__libc_init_array+0x70>
 af0:	e5b53004 	ldr	r3, [r5, #4]!
 af4:	e2844001 	add	r4, r4, #1
 af8:	e1a0e00f 	mov	lr, pc
 afc:	e12fff13 	bx	r3
 b00:	e1560004 	cmp	r6, r4
 b04:	1afffff9 	bne	af0 <__libc_init_array+0x58>
 b08:	e8bd4070 	pop	{r4, r5, r6, lr}
 b0c:	e12fff1e 	bx	lr
 b10:	00000b44 	.word	0x00000b44
 b14:	00000b44 	.word	0x00000b44
 b18:	00000b44 	.word	0x00000b44
 b1c:	00000b4c 	.word	0x00000b4c

Disassembly of section .rodata:

00000b24 <_global_impure_ptr>:
 b24:	00000b90 00000043                       ....C...

00000b2c <_init>:
 b2c:	e1a0c00d 	mov	r12, sp
 b30:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b34:	e24cb004 	sub	r11, r12, #4
 b38:	e24bd028 	sub	sp, r11, #40	; 0x28
 b3c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b40:	e12fff1e 	bx	lr

00000b44 <__init_array_start>:
 b44:	000009b0 	.word	0x000009b0

00000b48 <__frame_dummy_init_array_entry>:
 b48:	00000208                                ....

00000b4c <__libc_fini>:
 b4c:	e1a0c00d 	mov	r12, sp
 b50:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b54:	e24cb004 	sub	r11, r12, #4
 b58:	e24bd028 	sub	sp, r11, #40	; 0x28
 b5c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b60:	e12fff1e 	bx	lr

00000b64 <__fini_array_start>:
 b64:	000001c4 	.word	0x000001c4

00000b68 <__cs3_regions>:
 b68:	00000000 	.word	0x00000000
 b6c:	00000040 	.word	0x00000040
 b70:	00000040 	.word	0x00000040
 b74:	00000f80 	.word	0x00000f80
 b78:	00000020 	.word	0x00000020

00000b7c <__cs3_regions_end>:
 b7c:	00000000 	.word	0x00000000
