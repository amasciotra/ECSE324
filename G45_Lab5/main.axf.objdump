
//campus.mcgill.ca/EMF/ELE/amasci1/Desktop/G45_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	8c 16 00 00 98 16 00 00 a4 16 00 00 b0 16 00 00     ................
      30:	bc 16 00 00 14 25 00 00 34 15 00 00 c8 16 00 00     .....%..4.......

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0008f5 	bl	24b0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000025fc 	.word	0x000025fc

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031880 	.word	0x00031880

00000124 <__cs3_heap_start_ptr>:
     124:	000318c8 	.word	0x000318c8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031888 	.word	0x00031888
     170:	0003188b 	.word	0x0003188b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031888 	.word	0x00031888
     1bc:	00031888 	.word	0x00031888
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031888 	.word	0x00031888
     200:	00000000 	.word	0x00000000
     204:	000025a0 	.word	0x000025a0

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000025a0 	.word	0x000025a0
     250:	0003188c 	.word	0x0003188c
     254:	00002600 	.word	0x00002600
     258:	00000000 	.word	0x00000000

0000025c <get_signal>:





int get_signal(double freq, double time){       //this function calculates the proper signal to send into the audiocodec
     25c:	e92d4830 	push	{r4, r5, r11, lr}
     260:	e28db00c 	add	r11, sp, #12
     264:	e24dd028 	sub	sp, sp, #40	; 0x28
     268:	e14b02fc 	strd	r0, [r11, #-44]	; 0xffffffd4
     26c:	e14b23f4 	strd	r2, [r11, #-52]	; 0xffffffcc

		int index = (int)(freq * time)% 48000;		//floor of freqeuncy
     270:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     274:	e14b23d4 	ldrd	r2, [r11, #-52]	; 0xffffffcc
     278:	eb000636 	bl	1b58 <__aeabi_dmul>
     27c:	e1a02000 	mov	r2, r0
     280:	e1a03001 	mov	r3, r1
     284:	e1a00002 	mov	r0, r2
     288:	e1a01003 	mov	r1, r3
     28c:	eb000758 	bl	1ff4 <__aeabi_d2iz>
     290:	e1a03000 	mov	r3, r0
     294:	e30129f1 	movw	r2, #6641	; 0x19f1
     298:	e3402576 	movt	r2, #1398	; 0x576
     29c:	e0c21392 	smull	r1, r2, r2, r3
     2a0:	e1a01542 	asr	r1, r2, #10
     2a4:	e1a02fc3 	asr	r2, r3, #31
     2a8:	e0622001 	rsb	r2, r2, r1
     2ac:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2b0:	e0020291 	mul	r2, r1, r2
     2b4:	e0623003 	rsb	r3, r2, r3
     2b8:	e50b3010 	str	r3, [r11, #-16]
		double decimal = (freq * time) - (int) (freq * time);//getting decimal number
     2bc:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     2c0:	e14b23d4 	ldrd	r2, [r11, #-52]	; 0xffffffcc
     2c4:	eb000623 	bl	1b58 <__aeabi_dmul>
     2c8:	e1a02000 	mov	r2, r0
     2cc:	e1a03001 	mov	r3, r1
     2d0:	e1a04002 	mov	r4, r2
     2d4:	e1a05003 	mov	r5, r3
     2d8:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     2dc:	e14b23d4 	ldrd	r2, [r11, #-52]	; 0xffffffcc
     2e0:	eb00061c 	bl	1b58 <__aeabi_dmul>
     2e4:	e1a02000 	mov	r2, r0
     2e8:	e1a03001 	mov	r3, r1
     2ec:	e1a00002 	mov	r0, r2
     2f0:	e1a01003 	mov	r1, r3
     2f4:	eb00073e 	bl	1ff4 <__aeabi_d2iz>
     2f8:	e1a03000 	mov	r3, r0
     2fc:	e1a00003 	mov	r0, r3
     300:	eb0005dd 	bl	1a7c <__aeabi_i2d>
     304:	e1a02000 	mov	r2, r0
     308:	e1a03001 	mov	r3, r1
     30c:	e1a00004 	mov	r0, r4
     310:	e1a01005 	mov	r1, r5
     314:	eb00050a 	bl	1744 <__aeabi_dsub>
     318:	e1a02000 	mov	r2, r0
     31c:	e1a03001 	mov	r3, r1
     320:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4
		int signal = ((1 - decimal) * sine[index]) + ((decimal)*sine[index+1]);
     324:	e3a00000 	mov	r0, #0
     328:	e3a01000 	mov	r1, #0
     32c:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     330:	e14b21dc 	ldrd	r2, [r11, #-28]	; 0xffffffe4
     334:	eb000502 	bl	1744 <__aeabi_dsub>
     338:	e1a02000 	mov	r2, r0
     33c:	e1a03001 	mov	r3, r1
     340:	e1a04002 	mov	r4, r2
     344:	e1a05003 	mov	r5, r3
     348:	e3023650 	movw	r3, #9808	; 0x2650
     34c:	e3403000 	movt	r3, #0
     350:	e51b2010 	ldr	r2, [r11, #-16]
     354:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     358:	e1a00003 	mov	r0, r3
     35c:	eb0005c6 	bl	1a7c <__aeabi_i2d>
     360:	e1a02000 	mov	r2, r0
     364:	e1a03001 	mov	r3, r1
     368:	e1a00004 	mov	r0, r4
     36c:	e1a01005 	mov	r1, r5
     370:	eb0005f8 	bl	1b58 <__aeabi_dmul>
     374:	e1a02000 	mov	r2, r0
     378:	e1a03001 	mov	r3, r1
     37c:	e1a04002 	mov	r4, r2
     380:	e1a05003 	mov	r5, r3
     384:	e51b3010 	ldr	r3, [r11, #-16]
     388:	e2832001 	add	r2, r3, #1
     38c:	e3023650 	movw	r3, #9808	; 0x2650
     390:	e3403000 	movt	r3, #0
     394:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     398:	e1a00003 	mov	r0, r3
     39c:	eb0005b6 	bl	1a7c <__aeabi_i2d>
     3a0:	e1a02000 	mov	r2, r0
     3a4:	e1a03001 	mov	r3, r1
     3a8:	e1a00002 	mov	r0, r2
     3ac:	e1a01003 	mov	r1, r3
     3b0:	e14b21dc 	ldrd	r2, [r11, #-28]	; 0xffffffe4
     3b4:	eb0005e7 	bl	1b58 <__aeabi_dmul>
     3b8:	e1a02000 	mov	r2, r0
     3bc:	e1a03001 	mov	r3, r1
     3c0:	e1a00004 	mov	r0, r4
     3c4:	e1a01005 	mov	r1, r5
     3c8:	eb0004de 	bl	1748 <__adddf3>
     3cc:	e1a02000 	mov	r2, r0
     3d0:	e1a03001 	mov	r3, r1
     3d4:	e1a00002 	mov	r0, r2
     3d8:	e1a01003 	mov	r1, r3
     3dc:	eb000704 	bl	1ff4 <__aeabi_d2iz>
     3e0:	e1a03000 	mov	r3, r0
     3e4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
		//int signal = sine[index];
		 return  signal;
     3e8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
	}
     3ec:	e1a00003 	mov	r0, r3
     3f0:	e24bd00c 	sub	sp, r11, #12
     3f4:	e8bd8830 	pop	{r4, r5, r11, pc}

000003f8 <keyboardcontrol>:

void keyboardcontrol(char *data){         //this function calculates the frequency to be played instructed from the keyboard
     3f8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     3fc:	e28db000 	add	r11, sp, #0
     400:	e24dd00c 	sub	sp, sp, #12
     404:	e50b0008 	str	r0, [r11, #-8]
    double freq;// sum frequency to return
   // int i;  //iterator
    
    //we will check the *data argument to see what buttons are pressed and then activate the right code
    
    if(*data == 0x79){//plus ++++++ is pressed on numberpad, increase amplitude
     408:	e51b3008 	ldr	r3, [r11, #-8]
     40c:	e5d33000 	ldrb	r3, [r3]
     410:	e3530079 	cmp	r3, #121	; 0x79
     414:	1a00000d 	bne	450 <keyboardcontrol+0x58>
        if(*prev != 0xF0){//check the breakcode
     418:	e30138c4 	movw	r3, #6340	; 0x18c4
     41c:	e3403003 	movt	r3, #3
     420:	e5933000 	ldr	r3, [r3]
     424:	e5d33000 	ldrb	r3, [r3]
     428:	e35300f0 	cmp	r3, #240	; 0xf0
     42c:	0a0000bd 	beq	728 <keyboardcontrol+0x330>
            amplitude = amplitude + 1; //increase volume
     430:	e3023608 	movw	r3, #9736	; 0x2608
     434:	e3403000 	movt	r3, #0
     438:	e5933000 	ldr	r3, [r3]
     43c:	e2832001 	add	r2, r3, #1
     440:	e3023608 	movw	r3, #9736	; 0x2608
     444:	e3403000 	movt	r3, #0
     448:	e5832000 	str	r2, [r3]
     44c:	ea0000b5 	b	728 <keyboardcontrol+0x330>
            
        }
        
    }else if(*data == 0x7B){ //minus ------ button is pressed on numberpad
     450:	e51b3008 	ldr	r3, [r11, #-8]
     454:	e5d33000 	ldrb	r3, [r3]
     458:	e353007b 	cmp	r3, #123	; 0x7b
     45c:	1a000012 	bne	4ac <keyboardcontrol+0xb4>
        if(*prev != 0xF0){//checking breakcode
     460:	e30138c4 	movw	r3, #6340	; 0x18c4
     464:	e3403003 	movt	r3, #3
     468:	e5933000 	ldr	r3, [r3]
     46c:	e5d33000 	ldrb	r3, [r3]
     470:	e35300f0 	cmp	r3, #240	; 0xf0
     474:	0a0000ab 	beq	728 <keyboardcontrol+0x330>
            if(amplitude != 0){//cant make my int negative for the amplitude, so itll stop at 0
     478:	e3023608 	movw	r3, #9736	; 0x2608
     47c:	e3403000 	movt	r3, #0
     480:	e5933000 	ldr	r3, [r3]
     484:	e3530000 	cmp	r3, #0
     488:	0a0000a6 	beq	728 <keyboardcontrol+0x330>
                amplitude = amplitude - 1;
     48c:	e3023608 	movw	r3, #9736	; 0x2608
     490:	e3403000 	movt	r3, #0
     494:	e5933000 	ldr	r3, [r3]
     498:	e2432001 	sub	r2, r3, #1
     49c:	e3023608 	movw	r3, #9736	; 0x2608
     4a0:	e3403000 	movt	r3, #0
     4a4:	e5832000 	str	r2, [r3]
     4a8:	ea00009e 	b	728 <keyboardcontrol+0x330>
            }
            
        }
        
    }else if(*data == 0x1C){//AAAAAA is pressed play note CCCCCC
     4ac:	e51b3008 	ldr	r3, [r11, #-8]
     4b0:	e5d33000 	ldrb	r3, [r3]
     4b4:	e353001c 	cmp	r3, #28
     4b8:	1a00000f 	bne	4fc <keyboardcontrol+0x104>
        if(*prev == 0xF0){//A is being released
     4bc:	e30138c4 	movw	r3, #6340	; 0x18c4
     4c0:	e3403003 	movt	r3, #3
     4c4:	e5933000 	ldr	r3, [r3]
     4c8:	e5d33000 	ldrb	r3, [r3]
     4cc:	e35300f0 	cmp	r3, #240	; 0xf0
     4d0:	1a000004 	bne	4e8 <keyboardcontrol+0xf0>
            buttons[0] = 0;//making boolean 0
     4d4:	e30138a4 	movw	r3, #6308	; 0x18a4
     4d8:	e3403003 	movt	r3, #3
     4dc:	e3a02000 	mov	r2, #0
     4e0:	e5832000 	str	r2, [r3]
     4e4:	ea00008f 	b	728 <keyboardcontrol+0x330>
        
        }else{ //button A is being pressed
            buttons[0] = 1;
     4e8:	e30138a4 	movw	r3, #6308	; 0x18a4
     4ec:	e3403003 	movt	r3, #3
     4f0:	e3a02001 	mov	r2, #1
     4f4:	e5832000 	str	r2, [r3]
     4f8:	ea00008a 	b	728 <keyboardcontrol+0x330>
            
        }
        
        
    }else if(*data == 0x1B){//SSSS is pressed play note DDDD
     4fc:	e51b3008 	ldr	r3, [r11, #-8]
     500:	e5d33000 	ldrb	r3, [r3]
     504:	e353001b 	cmp	r3, #27
     508:	1a00000f 	bne	54c <keyboardcontrol+0x154>
        if(*prev == 0xF0){//button is being released
     50c:	e30138c4 	movw	r3, #6340	; 0x18c4
     510:	e3403003 	movt	r3, #3
     514:	e5933000 	ldr	r3, [r3]
     518:	e5d33000 	ldrb	r3, [r3]
     51c:	e35300f0 	cmp	r3, #240	; 0xf0
     520:	1a000004 	bne	538 <keyboardcontrol+0x140>
            buttons[1] = 0;
     524:	e30138a4 	movw	r3, #6308	; 0x18a4
     528:	e3403003 	movt	r3, #3
     52c:	e3a02000 	mov	r2, #0
     530:	e5832004 	str	r2, [r3, #4]
     534:	ea00007b 	b	728 <keyboardcontrol+0x330>
            
        }else {//button is being pressed
            buttons[1] = 1;
     538:	e30138a4 	movw	r3, #6308	; 0x18a4
     53c:	e3403003 	movt	r3, #3
     540:	e3a02001 	mov	r2, #1
     544:	e5832004 	str	r2, [r3, #4]
     548:	ea000076 	b	728 <keyboardcontrol+0x330>
        }
    }else if(*data == 0x23){ //DDDD is pressed note EEEEEE
     54c:	e51b3008 	ldr	r3, [r11, #-8]
     550:	e5d33000 	ldrb	r3, [r3]
     554:	e3530023 	cmp	r3, #35	; 0x23
     558:	1a00000f 	bne	59c <keyboardcontrol+0x1a4>
        if(*prev == 0xF0){
     55c:	e30138c4 	movw	r3, #6340	; 0x18c4
     560:	e3403003 	movt	r3, #3
     564:	e5933000 	ldr	r3, [r3]
     568:	e5d33000 	ldrb	r3, [r3]
     56c:	e35300f0 	cmp	r3, #240	; 0xf0
     570:	1a000004 	bne	588 <keyboardcontrol+0x190>
            buttons[2] = 0;
     574:	e30138a4 	movw	r3, #6308	; 0x18a4
     578:	e3403003 	movt	r3, #3
     57c:	e3a02000 	mov	r2, #0
     580:	e5832008 	str	r2, [r3, #8]
     584:	ea000067 	b	728 <keyboardcontrol+0x330>
            
        }else{
            buttons[2] = 1;
     588:	e30138a4 	movw	r3, #6308	; 0x18a4
     58c:	e3403003 	movt	r3, #3
     590:	e3a02001 	mov	r2, #1
     594:	e5832008 	str	r2, [r3, #8]
     598:	ea000062 	b	728 <keyboardcontrol+0x330>
        }
        
        
    }else if(*data == 0x2B){ //FFFFF is pressed note FFFFF
     59c:	e51b3008 	ldr	r3, [r11, #-8]
     5a0:	e5d33000 	ldrb	r3, [r3]
     5a4:	e353002b 	cmp	r3, #43	; 0x2b
     5a8:	1a00000f 	bne	5ec <keyboardcontrol+0x1f4>
        if(*prev == 0xF0){
     5ac:	e30138c4 	movw	r3, #6340	; 0x18c4
     5b0:	e3403003 	movt	r3, #3
     5b4:	e5933000 	ldr	r3, [r3]
     5b8:	e5d33000 	ldrb	r3, [r3]
     5bc:	e35300f0 	cmp	r3, #240	; 0xf0
     5c0:	1a000004 	bne	5d8 <keyboardcontrol+0x1e0>
            buttons[3] = 0;
     5c4:	e30138a4 	movw	r3, #6308	; 0x18a4
     5c8:	e3403003 	movt	r3, #3
     5cc:	e3a02000 	mov	r2, #0
     5d0:	e583200c 	str	r2, [r3, #12]
     5d4:	ea000053 	b	728 <keyboardcontrol+0x330>
            
        }else{
            buttons[3] = 1;
     5d8:	e30138a4 	movw	r3, #6308	; 0x18a4
     5dc:	e3403003 	movt	r3, #3
     5e0:	e3a02001 	mov	r2, #1
     5e4:	e583200c 	str	r2, [r3, #12]
     5e8:	ea00004e 	b	728 <keyboardcontrol+0x330>
        }
        
    }else if(*data == 0x3B){ //JJJJJJ is pressed note GGGGGGG
     5ec:	e51b3008 	ldr	r3, [r11, #-8]
     5f0:	e5d33000 	ldrb	r3, [r3]
     5f4:	e353003b 	cmp	r3, #59	; 0x3b
     5f8:	1a00000f 	bne	63c <keyboardcontrol+0x244>
        if(*prev == 0xF0){//button is being released
     5fc:	e30138c4 	movw	r3, #6340	; 0x18c4
     600:	e3403003 	movt	r3, #3
     604:	e5933000 	ldr	r3, [r3]
     608:	e5d33000 	ldrb	r3, [r3]
     60c:	e35300f0 	cmp	r3, #240	; 0xf0
     610:	1a000004 	bne	628 <keyboardcontrol+0x230>
            buttons[4] = 0; //set my bolean to off
     614:	e30138a4 	movw	r3, #6308	; 0x18a4
     618:	e3403003 	movt	r3, #3
     61c:	e3a02000 	mov	r2, #0
     620:	e5832010 	str	r2, [r3, #16]
     624:	ea00003f 	b	728 <keyboardcontrol+0x330>
            
        }else{
            buttons[4] = 1; //set my boolean to on
     628:	e30138a4 	movw	r3, #6308	; 0x18a4
     62c:	e3403003 	movt	r3, #3
     630:	e3a02001 	mov	r2, #1
     634:	e5832010 	str	r2, [r3, #16]
     638:	ea00003a 	b	728 <keyboardcontrol+0x330>
        }
        
    }else if(*data == 0x42){ //KKKKK is pressed note AAAAAAA
     63c:	e51b3008 	ldr	r3, [r11, #-8]
     640:	e5d33000 	ldrb	r3, [r3]
     644:	e3530042 	cmp	r3, #66	; 0x42
     648:	1a00000f 	bne	68c <keyboardcontrol+0x294>
        if(*prev == 0xF0){//button is being released
     64c:	e30138c4 	movw	r3, #6340	; 0x18c4
     650:	e3403003 	movt	r3, #3
     654:	e5933000 	ldr	r3, [r3]
     658:	e5d33000 	ldrb	r3, [r3]
     65c:	e35300f0 	cmp	r3, #240	; 0xf0
     660:	1a000004 	bne	678 <keyboardcontrol+0x280>
            buttons[5] = 0; //set my bolean to off
     664:	e30138a4 	movw	r3, #6308	; 0x18a4
     668:	e3403003 	movt	r3, #3
     66c:	e3a02000 	mov	r2, #0
     670:	e5832014 	str	r2, [r3, #20]
     674:	ea00002b 	b	728 <keyboardcontrol+0x330>
            
        }else{
            buttons[5] = 1; //set my boolean to on
     678:	e30138a4 	movw	r3, #6308	; 0x18a4
     67c:	e3403003 	movt	r3, #3
     680:	e3a02001 	mov	r2, #1
     684:	e5832014 	str	r2, [r3, #20]
     688:	ea000026 	b	728 <keyboardcontrol+0x330>
        }
        
    }else if(*data == 0x4B){ //LLLLL is pressed note BBBBBBBB
     68c:	e51b3008 	ldr	r3, [r11, #-8]
     690:	e5d33000 	ldrb	r3, [r3]
     694:	e353004b 	cmp	r3, #75	; 0x4b
     698:	1a00000f 	bne	6dc <keyboardcontrol+0x2e4>
        if(*prev == 0xF0){//button is being released
     69c:	e30138c4 	movw	r3, #6340	; 0x18c4
     6a0:	e3403003 	movt	r3, #3
     6a4:	e5933000 	ldr	r3, [r3]
     6a8:	e5d33000 	ldrb	r3, [r3]
     6ac:	e35300f0 	cmp	r3, #240	; 0xf0
     6b0:	1a000004 	bne	6c8 <keyboardcontrol+0x2d0>
            buttons[6] = 0; //set my bolean to off
     6b4:	e30138a4 	movw	r3, #6308	; 0x18a4
     6b8:	e3403003 	movt	r3, #3
     6bc:	e3a02000 	mov	r2, #0
     6c0:	e5832018 	str	r2, [r3, #24]
     6c4:	ea000017 	b	728 <keyboardcontrol+0x330>
            
        }else{
            buttons[6] = 1; //set my boolean to on
     6c8:	e30138a4 	movw	r3, #6308	; 0x18a4
     6cc:	e3403003 	movt	r3, #3
     6d0:	e3a02001 	mov	r2, #1
     6d4:	e5832018 	str	r2, [r3, #24]
     6d8:	ea000012 	b	728 <keyboardcontrol+0x330>
        }
        
    }else if(*data == 0x4C){ //;;;;;;;;; is pressed note CCCCCCC
     6dc:	e51b3008 	ldr	r3, [r11, #-8]
     6e0:	e5d33000 	ldrb	r3, [r3]
     6e4:	e353004c 	cmp	r3, #76	; 0x4c
     6e8:	1a00000e 	bne	728 <keyboardcontrol+0x330>
        if(*prev == 0xF0){//button is being released
     6ec:	e30138c4 	movw	r3, #6340	; 0x18c4
     6f0:	e3403003 	movt	r3, #3
     6f4:	e5933000 	ldr	r3, [r3]
     6f8:	e5d33000 	ldrb	r3, [r3]
     6fc:	e35300f0 	cmp	r3, #240	; 0xf0
     700:	1a000004 	bne	718 <keyboardcontrol+0x320>
            buttons[7] = 0; //set my bolean to off
     704:	e30138a4 	movw	r3, #6308	; 0x18a4
     708:	e3403003 	movt	r3, #3
     70c:	e3a02000 	mov	r2, #0
     710:	e583201c 	str	r2, [r3, #28]
     714:	ea000003 	b	728 <keyboardcontrol+0x330>
            
        }else{
            buttons[7] = 1; //set my boolean to on
     718:	e30138a4 	movw	r3, #6308	; 0x18a4
     71c:	e3403003 	movt	r3, #3
     720:	e3a02001 	mov	r2, #1
     724:	e583201c 	str	r2, [r3, #28]
        }
    }


}
     728:	e28bd000 	add	sp, r11, #0
     72c:	e8bd0800 	ldmfd	sp!, {r11}
     730:	e12fff1e 	bx	lr

00000734 <main>:
 




int main() {
     734:	e92d4830 	push	{r4, r5, r11, lr}
     738:	e28db00c 	add	r11, sp, #12
     73c:	e24dd95d 	sub	sp, sp, #1523712	; 0x174000
     740:	e24dddd5 	sub	sp, sp, #13632	; 0x3540
    int_setup(1, (int[]){199});	//setting the lengths and the id's # of the interrupts wuith respect to the header files convention and int_setup file
     744:	e3a030c7 	mov	r3, #199	; 0xc7
     748:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
     74c:	e24b3034 	sub	r3, r11, #52	; 0x34
     750:	e3a00001 	mov	r0, #1
     754:	e1a01003 	mov	r1, r3
     758:	eb0003e9 	bl	1704 <int_setup>
   
    
    int time = 1;
     75c:	e3a03001 	mov	r3, #1
     760:	e50b3010 	str	r3, [r11, #-16]
    //double freq; //frequency sent to the draw and the getsignal
    char *data;//reading keyboard
    int sum = 0;
     764:	e3a03000 	mov	r3, #0
     768:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int signals[8][48000];
	int x = 0;
     76c:	e3a03000 	mov	r3, #0
     770:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int y = 0;
     774:	e3a03000 	mov	r3, #0
     778:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int tracky[320] = {120};
     77c:	e3083ad8 	movw	r3, #35544	; 0x8ad8
     780:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     784:	e24b000c 	sub	r0, r11, #12
     788:	e0802003 	add	r2, r0, r3
     78c:	e3a03c05 	mov	r3, #1280	; 0x500
     790:	e1a00002 	mov	r0, r2
     794:	e3a01000 	mov	r1, #0
     798:	e1a02003 	mov	r2, r3
     79c:	eb000640 	bl	20a4 <memset>
     7a0:	e3083ad8 	movw	r3, #35544	; 0x8ad8
     7a4:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     7a8:	e3a02078 	mov	r2, #120	; 0x78
     7ac:	e24b100c 	sub	r1, r11, #12
     7b0:	e7812003 	str	r2, [r1, r3]
	int *prevprev;
	

	int i, j;

	for (i = 0; i < 8; i++){
     7b4:	e3a03000 	mov	r3, #0
     7b8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     7bc:	ea000026 	b	85c <ICDIPTR+0x5c>
		for (j = 0; j < 48000; j++){
     7c0:	e3a03000 	mov	r3, #0
     7c4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     7c8:	ea00001c 	b	840 <ICDIPTR+0x40>
			signals[i][j] = get_signal(frequency[i],j);
     7cc:	e3023610 	movw	r3, #9744	; 0x2610
     7d0:	e3403000 	movt	r3, #0
     7d4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     7d8:	e1a02182 	lsl	r2, r2, #3
     7dc:	e0833002 	add	r3, r3, r2
     7e0:	e1c340d0 	ldrd	r4, [r3]
     7e4:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
     7e8:	eb0004a3 	bl	1a7c <__aeabi_i2d>
     7ec:	e1a02000 	mov	r2, r0
     7f0:	e1a03001 	mov	r3, r1
     7f4:	e1a00004 	mov	r0, r4
     7f8:	e1a01005 	mov	r1, r5
     7fc:	ebfffe96 	bl	25c <get_signal>
     800:	e1a02000 	mov	r2, r0
     804:	e3083fd8 	movw	r3, #36824	; 0x8fd8
     808:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     80c:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
     810:	e30b0b80 	movw	r0, #48000	; 0xbb80
     814:	e0000190 	mul	r0, r0, r1
     818:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     81c:	e0801001 	add	r1, r0, r1
     820:	e1a01101 	lsl	r1, r1, #2
     824:	e24b000c 	sub	r0, r11, #12
     828:	e0801001 	add	r1, r0, r1
     82c:	e0813003 	add	r3, r1, r3
     830:	e5832000 	str	r2, [r3]
	

	int i, j;

	for (i = 0; i < 8; i++){
		for (j = 0; j < 48000; j++){
     834:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     838:	e2833001 	add	r3, r3, #1
     83c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     840:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     844:	e30b3b7f 	movw	r3, #47999	; 0xbb7f
     848:	e1520003 	cmp	r2, r3
     84c:	daffffde 	ble	7cc <main+0x98>
	int *prevprev;
	

	int i, j;

	for (i = 0; i < 8; i++){
     850:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     854:	e2833001 	add	r3, r3, #1
     858:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     85c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     860:	e3530007 	cmp	r3, #7
     864:	daffffd5 	ble	7c0 <main+0x8c>
		}
	}
	

    HPS_TIM_config_t hps_tim;
    hps_tim.tim = TIM0;
     868:	e3083ac0 	movw	r3, #35520	; 0x8ac0
     86c:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     870:	e3a02001 	mov	r2, #1
     874:	e24b100c 	sub	r1, r11, #12
     878:	e7c12003 	strb	r2, [r1, r3]
    hps_tim.timeout = 20;	//cause of 48k sample inverse of 48k to get time
     87c:	e3083ac0 	movw	r3, #35520	; 0x8ac0
     880:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     884:	e3a02004 	mov	r2, #4
     888:	e24b000c 	sub	r0, r11, #12
     88c:	e0803003 	add	r3, r0, r3
     890:	e0833002 	add	r3, r3, r2
     894:	e3a02014 	mov	r2, #20
     898:	e5832000 	str	r2, [r3]
    hps_tim.LD_en = 1;
     89c:	e3083ac0 	movw	r3, #35520	; 0x8ac0
     8a0:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     8a4:	e3a02008 	mov	r2, #8
     8a8:	e24b100c 	sub	r1, r11, #12
     8ac:	e0813003 	add	r3, r1, r3
     8b0:	e0833002 	add	r3, r3, r2
     8b4:	e3a02001 	mov	r2, #1
     8b8:	e5832000 	str	r2, [r3]
    hps_tim.INT_en = 1;
     8bc:	e3083ac0 	movw	r3, #35520	; 0x8ac0
     8c0:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     8c4:	e3a0200c 	mov	r2, #12
     8c8:	e24b000c 	sub	r0, r11, #12
     8cc:	e0803003 	add	r3, r0, r3
     8d0:	e0833002 	add	r3, r3, r2
     8d4:	e3a02001 	mov	r2, #1
     8d8:	e5832000 	str	r2, [r3]
    hps_tim.enable = 1;
     8dc:	e3083ac0 	movw	r3, #35520	; 0x8ac0
     8e0:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     8e4:	e3a02010 	mov	r2, #16
     8e8:	e24b100c 	sub	r1, r11, #12
     8ec:	e0813003 	add	r3, r1, r3
     8f0:	e0833002 	add	r3, r3, r2
     8f4:	e3a02001 	mov	r2, #1
     8f8:	e5832000 	str	r2, [r3]
    
    HPS_TIM_config_ASM(&hps_tim);		//configure timer
     8fc:	e24b395d 	sub	r3, r11, #1523712	; 0x174000
     900:	e243300c 	sub	r3, r3, #12
     904:	e2433dd5 	sub	r3, r3, #13632	; 0x3540
     908:	e1a00003 	mov	r0, r3
     90c:	eb0000af 	bl	bd0 <HPS_TIM_config_ASM>
    
    VGA_clear_pixelbuff_ASM();
     910:	eb000248 	bl	1238 <VGA_clear_pixelbuff_ASM>
     914:	ea000000 	b	91c <ICDIPTR+0x11c>
	 

      

   
	}
     918:	e1a00000 	nop			; (mov r0, r0)
    HPS_TIM_config_ASM(&hps_tim);		//configure timer
    
    VGA_clear_pixelbuff_ASM();
    while(1) {
       
        if(read_ps2_data_ASM(data)){//if theres something in the data queue, here data is already a pointer char
     91c:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     920:	eb0001b7 	bl	1004 <read_ps2_data_ASM>
     924:	e1a03000 	mov	r3, r0
     928:	e3530000 	cmp	r3, #0
     92c:	0a000018 	beq	994 <ICDIPTR+0x194>
           	keyboardcontrol(data);
     930:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     934:	ebfffeaf 	bl	3f8 <keyboardcontrol>
			 if(*prev != *data){//do not recalculate same frequency once the button is already pressed
     938:	e30138c4 	movw	r3, #6340	; 0x18c4
     93c:	e3403003 	movt	r3, #3
     940:	e5933000 	ldr	r3, [r3]
     944:	e5d32000 	ldrb	r2, [r3]
     948:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     94c:	e5d33000 	ldrb	r3, [r3]
     950:	e1520003 	cmp	r2, r3
     954:	0a00000e 	beq	994 <ICDIPTR+0x194>
				*prevprev = *prev;
     958:	e30138c4 	movw	r3, #6340	; 0x18c4
     95c:	e3403003 	movt	r3, #3
     960:	e5933000 	ldr	r3, [r3]
     964:	e5d33000 	ldrb	r3, [r3]
     968:	e1a02003 	mov	r2, r3
     96c:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     970:	e5832000 	str	r2, [r3]
                *prev = *data;   
     974:	e30138c4 	movw	r3, #6340	; 0x18c4
     978:	e3403003 	movt	r3, #3
     97c:	e5933000 	ldr	r3, [r3]
     980:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     984:	e5d22000 	ldrb	r2, [r2]
     988:	e5c32000 	strb	r2, [r3]
				x=0;
     98c:	e3a03000 	mov	r3, #0
     990:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
            }
			
			
        }
        
        if(hps_tim0_int_flag){
     994:	e3003cf8 	movw	r3, #3320	; 0xcf8
     998:	e3403000 	movt	r3, #0
     99c:	e5933000 	ldr	r3, [r3]
     9a0:	e3530000 	cmp	r3, #0
     9a4:	0affffdb 	beq	918 <ICDIPTR+0x118>
		int i;
		time = (time + 1) % 48000;
     9a8:	e51b3010 	ldr	r3, [r11, #-16]
     9ac:	e2833001 	add	r3, r3, #1
     9b0:	e30129f1 	movw	r2, #6641	; 0x19f1
     9b4:	e3402576 	movt	r2, #1398	; 0x576
     9b8:	e0c20392 	smull	r0, r2, r2, r3
     9bc:	e1a01542 	asr	r1, r2, #10
     9c0:	e1a02fc3 	asr	r2, r3, #31
     9c4:	e0622001 	rsb	r2, r2, r1
     9c8:	e30b1b80 	movw	r1, #48000	; 0xbb80
     9cc:	e0020291 	mul	r2, r1, r2
     9d0:	e0623003 	rsb	r3, r2, r3
     9d4:	e50b3010 	str	r3, [r11, #-16]
		sum = 0;
     9d8:	e3a03000 	mov	r3, #0
     9dc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		hps_tim0_int_flag = 0;
     9e0:	e3003cf8 	movw	r3, #3320	; 0xcf8
     9e4:	e3403000 	movt	r3, #0
     9e8:	e3a02000 	mov	r2, #0
     9ec:	e5832000 	str	r2, [r3]
		for (i=0; i < 8; i++){//iterating through to see what signals need to be calucaltued
     9f0:	e3a03000 	mov	r3, #0
     9f4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     9f8:	ea000017 	b	a5c <ICDIPTR+0x25c>
            if(buttons[i] != 0){
     9fc:	e30138a4 	movw	r3, #6308	; 0x18a4
     a00:	e3403003 	movt	r3, #3
     a04:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     a08:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     a0c:	e3530000 	cmp	r3, #0
     a10:	0a00000e 	beq	a50 <ICDIPTR+0x250>
				sum = (sum + signals[i][time]); 
     a14:	e3083fd8 	movw	r3, #36824	; 0x8fd8
     a18:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     a1c:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     a20:	e30b1b80 	movw	r1, #48000	; 0xbb80
     a24:	e0010291 	mul	r1, r1, r2
     a28:	e51b2010 	ldr	r2, [r11, #-16]
     a2c:	e0812002 	add	r2, r1, r2
     a30:	e1a02102 	lsl	r2, r2, #2
     a34:	e24b100c 	sub	r1, r11, #12
     a38:	e0812002 	add	r2, r1, r2
     a3c:	e0823003 	add	r3, r2, r3
     a40:	e5933000 	ldr	r3, [r3]
     a44:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     a48:	e0823003 	add	r3, r2, r3
     a4c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        if(hps_tim0_int_flag){
		int i;
		time = (time + 1) % 48000;
		sum = 0;
		hps_tim0_int_flag = 0;
		for (i=0; i < 8; i++){//iterating through to see what signals need to be calucaltued
     a50:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     a54:	e2833001 	add	r3, r3, #1
     a58:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     a5c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     a60:	e3530007 	cmp	r3, #7
     a64:	daffffe4 	ble	9fc <ICDIPTR+0x1fc>
            if(buttons[i] != 0){
				sum = (sum + signals[i][time]); 
			}
		}
		sum = amplitude * sum;
     a68:	e3023608 	movw	r3, #9736	; 0x2608
     a6c:	e3403000 	movt	r3, #0
     a70:	e5932000 	ldr	r2, [r3]
     a74:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     a78:	e0030392 	mul	r3, r2, r3
     a7c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
       
        

		//signal = get_signal(freq, time);
		
			while(!audio_write_data_ASM(sum,sum)){
     a80:	e1a00000 	nop			; (mov r0, r0)
     a84:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     a88:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     a8c:	eb0000eb 	bl	e40 <audio_write_data_ASM>
     a90:	e1a03000 	mov	r3, r0
     a94:	e3530000 	cmp	r3, #0
     a98:	0afffff9 	beq	a84 <ICDIPTR+0x284>
			}
				 if(x < 320){
     a9c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     aa0:	e300313f 	movw	r3, #319	; 0x13f
     aa4:	e1520003 	cmp	r2, r3
     aa8:	caffff9a 	bgt	918 <ICDIPTR+0x118>
				y = 120 - sum/0x00fffff; //scale down
     aac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     ab0:	e3002801 	movw	r2, #2049	; 0x801
     ab4:	e3482000 	movt	r2, #32768	; 0x8000
     ab8:	e0c20392 	smull	r0, r2, r2, r3
     abc:	e0822003 	add	r2, r2, r3
     ac0:	e1a029c2 	asr	r2, r2, #19
     ac4:	e1a03fc3 	asr	r3, r3, #31
     ac8:	e0633002 	rsb	r3, r3, r2
     acc:	e2633078 	rsb	r3, r3, #120	; 0x78
     ad0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
				VGA_draw_point_ASM(x, tracky[x], 0);	//clear pixel
     ad4:	e3083ad8 	movw	r3, #35544	; 0x8ad8
     ad8:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     adc:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     ae0:	e1a02102 	lsl	r2, r2, #2
     ae4:	e24b100c 	sub	r1, r11, #12
     ae8:	e0812002 	add	r2, r1, r2
     aec:	e0823003 	add	r3, r2, r3
     af0:	e5933000 	ldr	r3, [r3]
     af4:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     af8:	e1a01003 	mov	r1, r3
     afc:	e3a02000 	mov	r2, #0
     b00:	eb000200 	bl	1308 <VGA_draw_point_ASM>
				VGA_draw_point_ASM(x, y, 0xFFFFF);
     b04:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     b08:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
     b0c:	e3e02000 	mvn	r2, #0
     b10:	eb0001fc 	bl	1308 <VGA_draw_point_ASM>
				tracky[x]=y;
     b14:	e3083ad8 	movw	r3, #35544	; 0x8ad8
     b18:	e34f3fe8 	movt	r3, #65512	; 0xffe8
     b1c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     b20:	e1a02102 	lsl	r2, r2, #2
     b24:	e24b000c 	sub	r0, r11, #12
     b28:	e0802002 	add	r2, r0, r2
     b2c:	e0823003 	add	r3, r2, r3
     b30:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     b34:	e5832000 	str	r2, [r3]
				x++;
     b38:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b3c:	e2833001 	add	r3, r3, #1
     b40:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	 

      

   
	}
     b44:	eaffff73 	b	918 <ICDIPTR+0x118>

00000b48 <HEX_clear_ASM>:
     b48:	e3a01000 	mov	r1, #0
     b4c:	ea000004 	b	b64 <WRITE>

00000b50 <HEX_flood_ASM>:
     b50:	e3a0107f 	mov	r1, #127	; 0x7f
     b54:	ea000002 	b	b64 <WRITE>

00000b58 <HEX_write_ASM>:
     b58:	e59f2064 	ldr	r2, [pc, #100]	; bc4 <PATTERNS+0x14>
     b5c:	e7d21001 	ldrb	r1, [r2, r1]
     b60:	eaffffff 	b	b64 <WRITE>

00000b64 <WRITE>:
     b64:	e92d0030 	push	{r4, r5}
     b68:	e59f2058 	ldr	r2, [pc, #88]	; bc8 <PATTERNS+0x18>
     b6c:	e3a03000 	mov	r3, #0
     b70:	e3e050ff 	mvn	r5, #255	; 0xff

00000b74 <LOOP>:
     b74:	e3100001 	tst	r0, #1
     b78:	0a000003 	beq	b8c <CONTINUE>
     b7c:	e5924000 	ldr	r4, [r2]
     b80:	e0044005 	and	r4, r4, r5
     b84:	e1844001 	orr	r4, r4, r1
     b88:	e5824000 	str	r4, [r2]

00000b8c <CONTINUE>:
     b8c:	e1a05c65 	ror	r5, r5, #24
     b90:	e1a01c61 	ror	r1, r1, #24
     b94:	e2833001 	add	r3, r3, #1
     b98:	e3530004 	cmp	r3, #4
     b9c:	059f2028 	ldreq	r2, [pc, #40]	; bcc <PATTERNS+0x1c>
     ba0:	e1b000a0 	lsrs	r0, r0, #1
     ba4:	1afffff2 	bne	b74 <LOOP>
     ba8:	e8bd0030 	pop	{r4, r5}
     bac:	e12fff1e 	bx	lr

00000bb0 <PATTERNS>:
     bb0:	4f5b063f 	.word	0x4f5b063f
     bb4:	077d6d66 	.word	0x077d6d66
     bb8:	7c776f7f 	.word	0x7c776f7f
     bbc:	71795e39 	.word	0x71795e39
     bc0:	000000ff 	.word	0x000000ff
     bc4:	00000bb0 	.word	0x00000bb0
     bc8:	ff200020 	.word	0xff200020
     bcc:	ff200030 	.word	0xff200030

00000bd0 <HPS_TIM_config_ASM>:
     bd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     bd4:	e3a01000 	mov	r1, #0
     bd8:	e3a02001 	mov	r2, #1
     bdc:	e5907000 	ldr	r7, [r0]
     be0:	eaffffff 	b	be4 <LOOP>

00000be4 <LOOP>:
     be4:	e1170112 	tst	r7, r2, lsl r1
     be8:	0a000000 	beq	bf0 <CONTINUE>
     bec:	eb000004 	bl	c04 <CONFIG>

00000bf0 <CONTINUE>:
     bf0:	e2811001 	add	r1, r1, #1
     bf4:	e3510004 	cmp	r1, #4
     bf8:	bafffff9 	blt	be4 <LOOP>

00000bfc <DONE>:
     bfc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     c00:	e12fff1e 	bx	lr

00000c04 <CONFIG>:
     c04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     c08:	e59f30e4 	ldr	r3, [pc, #228]	; cf4 <HPS_TIM_BASE+0x10>
     c0c:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     c10:	eb000005 	bl	c2c <DISABLE>
     c14:	eb000008 	bl	c3c <SET_LOAD_VAL>
     c18:	eb00000e 	bl	c58 <SET_LOAD_BIT>
     c1c:	eb000013 	bl	c70 <SET_INT_BIT>
     c20:	eb000019 	bl	c8c <SET_EN_BIT>
     c24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     c28:	e12fff1e 	bx	lr

00000c2c <DISABLE>:
     c2c:	e5945008 	ldr	r5, [r4, #8]
     c30:	e3c55001 	bic	r5, r5, #1
     c34:	e5845008 	str	r5, [r4, #8]
     c38:	e12fff1e 	bx	lr

00000c3c <SET_LOAD_VAL>:
     c3c:	e5905004 	ldr	r5, [r0, #4]
     c40:	e3a06019 	mov	r6, #25
     c44:	e0050695 	mul	r5, r5, r6
     c48:	e3510002 	cmp	r1, #2
     c4c:	b1a05105 	lsllt	r5, r5, #2
     c50:	e5845000 	str	r5, [r4]
     c54:	e12fff1e 	bx	lr

00000c58 <SET_LOAD_BIT>:
     c58:	e5945008 	ldr	r5, [r4, #8]
     c5c:	e5906008 	ldr	r6, [r0, #8]
     c60:	e3c55002 	bic	r5, r5, #2
     c64:	e1855086 	orr	r5, r5, r6, lsl #1
     c68:	e5845008 	str	r5, [r4, #8]
     c6c:	e12fff1e 	bx	lr

00000c70 <SET_INT_BIT>:
     c70:	e5945008 	ldr	r5, [r4, #8]
     c74:	e590600c 	ldr	r6, [r0, #12]
     c78:	e2266001 	eor	r6, r6, #1
     c7c:	e3c55004 	bic	r5, r5, #4
     c80:	e1855106 	orr	r5, r5, r6, lsl #2
     c84:	e5845008 	str	r5, [r4, #8]
     c88:	e12fff1e 	bx	lr

00000c8c <SET_EN_BIT>:
     c8c:	e5945008 	ldr	r5, [r4, #8]
     c90:	e5906010 	ldr	r6, [r0, #16]
     c94:	e3c55001 	bic	r5, r5, #1
     c98:	e1855006 	orr	r5, r5, r6
     c9c:	e5845008 	str	r5, [r4, #8]
     ca0:	e12fff1e 	bx	lr

00000ca4 <HPS_TIM_clear_INT_ASM>:
     ca4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ca8:	e3a01000 	mov	r1, #0
     cac:	e3a02001 	mov	r2, #1
     cb0:	eaffffff 	b	cb4 <INT_LOOP>

00000cb4 <INT_LOOP>:
     cb4:	e1100112 	tst	r0, r2, lsl r1
     cb8:	0a000000 	beq	cc0 <INT_CONTINUE>
     cbc:	eb000004 	bl	cd4 <CLEAR_IT>

00000cc0 <INT_CONTINUE>:
     cc0:	e2811001 	add	r1, r1, #1
     cc4:	e3510004 	cmp	r1, #4
     cc8:	bafffff9 	blt	cb4 <INT_LOOP>

00000ccc <INT_DONE>:
     ccc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     cd0:	e12fff1e 	bx	lr

00000cd4 <CLEAR_IT>:
     cd4:	e59f3018 	ldr	r3, [pc, #24]	; cf4 <HPS_TIM_BASE+0x10>
     cd8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     cdc:	e593300c 	ldr	r3, [r3, #12]
     ce0:	e12fff1e 	bx	lr

00000ce4 <HPS_TIM_BASE>:
     ce4:	ffc08000 	.word	0xffc08000
     ce8:	ffc09000 	.word	0xffc09000
     cec:	ffd00000 	.word	0xffd00000
     cf0:	ffd01000 	.word	0xffd01000
     cf4:	00000ce4 	.word	0x00000ce4

00000cf8 <hps_tim0_int_flag>:
     cf8:	00000000 	.word	0x00000000

00000cfc <A9_PRIV_TIM_ISR>:
hps_tim0_int_flag:
    .word 0x0


A9_PRIV_TIM_ISR:
	BX LR
     cfc:	e12fff1e 	bx	lr

00000d00 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     d00:	e12fff1e 	bx	lr

00000d04 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
    PUSH {LR}
     d04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

    MOV R0, #0x1
     d08:	e3a00001 	mov	r0, #1
    BL HPS_TIM_clear_INT_ASM    //Clear the interrupt flag from the timer (tim0)
     d0c:	ebffffe4 	bl	ca4 <HPS_TIM_clear_INT_ASM>

    LDR R0, =hps_tim0_int_flag  //this is loading the interrupt register and setting it to 1 for when there is an interrupt
     d10:	e59f003c 	ldr	r0, [pc, #60]	; d54 <FPGA_PS2_DUAL_ISR+0x4>
    MOV R1, #1
     d14:	e3a01001 	mov	r1, #1
    STR R1, [R0]
     d18:	e5801000 	str	r1, [r0]
    POP {LR}
     d1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)

	BX LR
     d20:	e12fff1e 	bx	lr

00000d24 <HPS_TIM1_ISR>:

HPS_TIM1_ISR:
	BX LR
     d24:	e12fff1e 	bx	lr

00000d28 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     d28:	e12fff1e 	bx	lr

00000d2c <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     d2c:	e12fff1e 	bx	lr

00000d30 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     d30:	e12fff1e 	bx	lr

00000d34 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     d34:	e12fff1e 	bx	lr

00000d38 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     d38:	e12fff1e 	bx	lr

00000d3c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     d3c:	e12fff1e 	bx	lr

00000d40 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     d40:	e12fff1e 	bx	lr

00000d44 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     d44:	e12fff1e 	bx	lr

00000d48 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     d48:	e12fff1e 	bx	lr

00000d4c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     d4c:	e12fff1e 	bx	lr

00000d50 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     d50:	e12fff1e 	bx	lr
    PUSH {LR}

    MOV R0, #0x1
    BL HPS_TIM_clear_INT_ASM    //Clear the interrupt flag from the timer (tim0)

    LDR R0, =hps_tim0_int_flag  //this is loading the interrupt register and setting it to 1 for when there is an interrupt
     d54:	00000cf8 	.word	0x00000cf8

00000d58 <read_LEDs_ASM>:
     d58:	e59f1010 	ldr	r1, [pc, #16]	; d70 <write_LEDs_ASM+0xc>
     d5c:	e5910000 	ldr	r0, [r1]
     d60:	e12fff1e 	bx	lr

00000d64 <write_LEDs_ASM>:
     d64:	e59f1004 	ldr	r1, [pc, #4]	; d70 <write_LEDs_ASM+0xc>
     d68:	e5810000 	str	r0, [r1]
     d6c:	e12fff1e 	bx	lr
     d70:	ff200000 	.word	0xff200000

00000d74 <audio_read_data_ASM>:
     d74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d78:	e92d0003 	push	{r0, r1}
     d7c:	eb000093 	bl	fd0 <audio_read_ralc_ASM>
     d80:	e3500000 	cmp	r0, #0
     d84:	08bd0003 	popeq	{r0, r1}
     d88:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d8c:	03a00000 	moveq	r0, #0
     d90:	012fff1e 	bxeq	lr
     d94:	eb000092 	bl	fe4 <audio_read_rarc_ASM>
     d98:	e3500000 	cmp	r0, #0
     d9c:	08bd0003 	popeq	{r0, r1}
     da0:	03a00000 	moveq	r0, #0
     da4:	012fff1e 	bxeq	lr
     da8:	e8bd0003 	pop	{r0, r1}
     dac:	e59f2240 	ldr	r2, [pc, #576]	; ff4 <audio_read_rarc_ASM+0x10>
     db0:	e5922000 	ldr	r2, [r2]
     db4:	e5802000 	str	r2, [r0]
     db8:	e59f3238 	ldr	r3, [pc, #568]	; ff8 <audio_read_rarc_ASM+0x14>
     dbc:	e5933000 	ldr	r3, [r3]
     dc0:	e5813000 	str	r3, [r1]
     dc4:	e3a00001 	mov	r0, #1

00000dc8 <audio_read_leftdata_ASM>:
     dc8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     dcc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     dd0:	eb00007e 	bl	fd0 <audio_read_ralc_ASM>
     dd4:	e3500000 	cmp	r0, #0
     dd8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     ddc:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     de0:	03a00000 	moveq	r0, #0
     de4:	012fff1e 	bxeq	lr
     de8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     dec:	e59f2200 	ldr	r2, [pc, #512]	; ff4 <audio_read_rarc_ASM+0x10>
     df0:	e5922000 	ldr	r2, [r2]
     df4:	e5802000 	str	r2, [r0]
     df8:	e3a00001 	mov	r0, #1
     dfc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e00:	e12fff1e 	bx	lr

00000e04 <audio_read_rightdata_ASM>:
     e04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e08:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     e0c:	eb000074 	bl	fe4 <audio_read_rarc_ASM>
     e10:	e3500000 	cmp	r0, #0
     e14:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     e18:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e1c:	03a00000 	moveq	r0, #0
     e20:	012fff1e 	bxeq	lr
     e24:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     e28:	e59f21c8 	ldr	r2, [pc, #456]	; ff8 <audio_read_rarc_ASM+0x14>
     e2c:	e5922000 	ldr	r2, [r2]
     e30:	e5802000 	str	r2, [r0]
     e34:	e3a00001 	mov	r0, #1
     e38:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e3c:	e12fff1e 	bx	lr

00000e40 <audio_write_data_ASM>:
     e40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e44:	e92d0003 	push	{r0, r1}
     e48:	eb000056 	bl	fa8 <audio_read_wslc_ASM>
     e4c:	e3500000 	cmp	r0, #0
     e50:	08bd0003 	popeq	{r0, r1}
     e54:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e58:	03a00000 	moveq	r0, #0
     e5c:	012fff1e 	bxeq	lr
     e60:	eb000055 	bl	fbc <audio_read_wsrc_ASM>
     e64:	e3500000 	cmp	r0, #0
     e68:	08bd0003 	popeq	{r0, r1}
     e6c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e70:	03a00000 	moveq	r0, #0
     e74:	012fff1e 	bxeq	lr
     e78:	e8bd0003 	pop	{r0, r1}
     e7c:	e59f2170 	ldr	r2, [pc, #368]	; ff4 <audio_read_rarc_ASM+0x10>
     e80:	e5820000 	str	r0, [r2]
     e84:	e59f316c 	ldr	r3, [pc, #364]	; ff8 <audio_read_rarc_ASM+0x14>
     e88:	e5831000 	str	r1, [r3]
     e8c:	e3a00001 	mov	r0, #1
     e90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e94:	e12fff1e 	bx	lr

00000e98 <audio_write_leftdata_ASM>:
     e98:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ea0:	eb000040 	bl	fa8 <audio_read_wslc_ASM>
     ea4:	e3500000 	cmp	r0, #0
     ea8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     eac:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     eb0:	03a00000 	moveq	r0, #0
     eb4:	012fff1e 	bxeq	lr
     eb8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     ebc:	e59f2130 	ldr	r2, [pc, #304]	; ff4 <audio_read_rarc_ASM+0x10>
     ec0:	e5820000 	str	r0, [r2]
     ec4:	e3a00001 	mov	r0, #1
     ec8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     ecc:	e12fff1e 	bx	lr

00000ed0 <audio_write_rightdata_ASM>:
     ed0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ed4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ed8:	eb000037 	bl	fbc <audio_read_wsrc_ASM>
     edc:	e3500000 	cmp	r0, #0
     ee0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     ee4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ee8:	03a00000 	moveq	r0, #0
     eec:	012fff1e 	bxeq	lr
     ef0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     ef4:	e59f20fc 	ldr	r2, [pc, #252]	; ff8 <audio_read_rarc_ASM+0x14>
     ef8:	e5820000 	str	r0, [r2]
     efc:	e3a00001 	mov	r0, #1
     f00:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f04:	e12fff1e 	bx	lr

00000f08 <audio_enable_read_fifo_clear_ASM>:
     f08:	e59f00ec 	ldr	r0, [pc, #236]	; ffc <audio_read_rarc_ASM+0x18>
     f0c:	e5901000 	ldr	r1, [r0]
     f10:	e3811004 	orr	r1, r1, #4
     f14:	e5801000 	str	r1, [r0]
     f18:	e12fff1e 	bx	lr

00000f1c <audio_enable_write_fifo_clear_ASM>:
     f1c:	e59f00d8 	ldr	r0, [pc, #216]	; ffc <audio_read_rarc_ASM+0x18>
     f20:	e5901000 	ldr	r1, [r0]
     f24:	e3811008 	orr	r1, r1, #8
     f28:	e5801000 	str	r1, [r0]
     f2c:	e12fff1e 	bx	lr

00000f30 <audio_disable_read_fifo_clear_ASM>:
     f30:	e59f00c4 	ldr	r0, [pc, #196]	; ffc <audio_read_rarc_ASM+0x18>
     f34:	e5901000 	ldr	r1, [r0]
     f38:	e3c11004 	bic	r1, r1, #4
     f3c:	e5801000 	str	r1, [r0]
     f40:	e12fff1e 	bx	lr

00000f44 <audio_disable_write_fifo_clear_ASM>:
     f44:	e59f00b0 	ldr	r0, [pc, #176]	; ffc <audio_read_rarc_ASM+0x18>
     f48:	e5901000 	ldr	r1, [r0]
     f4c:	e3c11008 	bic	r1, r1, #8
     f50:	e5801000 	str	r1, [r0]
     f54:	e12fff1e 	bx	lr

00000f58 <audio_enable_read_int_ASM>:
     f58:	e59f009c 	ldr	r0, [pc, #156]	; ffc <audio_read_rarc_ASM+0x18>
     f5c:	e5901000 	ldr	r1, [r0]
     f60:	e3811001 	orr	r1, r1, #1
     f64:	e5801000 	str	r1, [r0]
     f68:	e12fff1e 	bx	lr

00000f6c <audio_enable_write_int_ASM>:
     f6c:	e59f0088 	ldr	r0, [pc, #136]	; ffc <audio_read_rarc_ASM+0x18>
     f70:	e5901000 	ldr	r1, [r0]
     f74:	e3811002 	orr	r1, r1, #2
     f78:	e5801000 	str	r1, [r0]
     f7c:	e12fff1e 	bx	lr

00000f80 <audio_disable_read_int_ASM>:
     f80:	e59f0074 	ldr	r0, [pc, #116]	; ffc <audio_read_rarc_ASM+0x18>
     f84:	e5901000 	ldr	r1, [r0]
     f88:	e3c11001 	bic	r1, r1, #1
     f8c:	e5801000 	str	r1, [r0]
     f90:	e12fff1e 	bx	lr

00000f94 <audio_disable_write_int_ASM>:
     f94:	e59f0060 	ldr	r0, [pc, #96]	; ffc <audio_read_rarc_ASM+0x18>
     f98:	e5901000 	ldr	r1, [r0]
     f9c:	e3c11002 	bic	r1, r1, #2
     fa0:	e5801000 	str	r1, [r0]
     fa4:	e12fff1e 	bx	lr

00000fa8 <audio_read_wslc_ASM>:
     fa8:	e59f0050 	ldr	r0, [pc, #80]	; 1000 <audio_read_rarc_ASM+0x1c>
     fac:	e5900000 	ldr	r0, [r0]
     fb0:	e1a00c20 	lsr	r0, r0, #24
     fb4:	e20000ff 	and	r0, r0, #255	; 0xff
     fb8:	e12fff1e 	bx	lr

00000fbc <audio_read_wsrc_ASM>:
     fbc:	e59f003c 	ldr	r0, [pc, #60]	; 1000 <audio_read_rarc_ASM+0x1c>
     fc0:	e5900000 	ldr	r0, [r0]
     fc4:	e1a00820 	lsr	r0, r0, #16
     fc8:	e20000ff 	and	r0, r0, #255	; 0xff
     fcc:	e12fff1e 	bx	lr

00000fd0 <audio_read_ralc_ASM>:
     fd0:	e59f0028 	ldr	r0, [pc, #40]	; 1000 <audio_read_rarc_ASM+0x1c>
     fd4:	e5900000 	ldr	r0, [r0]
     fd8:	e1a00420 	lsr	r0, r0, #8
     fdc:	e20000ff 	and	r0, r0, #255	; 0xff
     fe0:	e12fff1e 	bx	lr

00000fe4 <audio_read_rarc_ASM>:
     fe4:	e59f0014 	ldr	r0, [pc, #20]	; 1000 <audio_read_rarc_ASM+0x1c>
     fe8:	e5900000 	ldr	r0, [r0]
     fec:	e20000ff 	and	r0, r0, #255	; 0xff
     ff0:	e12fff1e 	bx	lr
     ff4:	ff203048 	.word	0xff203048
     ff8:	ff20304c 	.word	0xff20304c
     ffc:	ff203040 	.word	0xff203040
    1000:	ff203044 	.word	0xff203044

00001004 <read_ps2_data_ASM>:
    1004:	e59f114c 	ldr	r1, [pc, #332]	; 1158 <ps2_fifo_ravail+0x4>
    1008:	e5911000 	ldr	r1, [r1]
    100c:	e3a02902 	mov	r2, #32768	; 0x8000
    1010:	e1110002 	tst	r1, r2
    1014:	03a00000 	moveq	r0, #0
    1018:	012fff1e 	bxeq	lr
    101c:	e20120ff 	and	r2, r1, #255	; 0xff
    1020:	e5c02000 	strb	r2, [r0]
    1024:	e59f2130 	ldr	r2, [pc, #304]	; 115c <ps2_fifo_ravail+0x8>
    1028:	e0010002 	and	r0, r1, r2
    102c:	e1a00820 	lsr	r0, r0, #16
    1030:	e12fff1e 	bx	lr

00001034 <enable_ps2_int_ASM>:
    1034:	e59f011c 	ldr	r0, [pc, #284]	; 1158 <ps2_fifo_ravail+0x4>
    1038:	e3a01001 	mov	r1, #1
    103c:	e5c01004 	strb	r1, [r0, #4]
    1040:	e12fff1e 	bx	lr

00001044 <disable_ps2_int_ASM>:
    1044:	e59f010c 	ldr	r0, [pc, #268]	; 1158 <ps2_fifo_ravail+0x4>
    1048:	e3a01000 	mov	r1, #0
    104c:	e5c01004 	strb	r1, [r0, #4]
    1050:	e12fff1e 	bx	lr

00001054 <ps2_fifo_data>:
	...

00001154 <ps2_fifo_ravail>:
    1154:	00000000 	.word	0x00000000
    1158:	ff200100 	.word	0xff200100
    115c:	ffff0000 	.word	0xffff0000

00001160 <read_PB_data_ASM>:
    1160:	e59f1074 	ldr	r1, [pc, #116]	; 11dc <disable_PB_INT_ASM+0x14>
    1164:	e5910000 	ldr	r0, [r1]
    1168:	e12fff1e 	bx	lr

0000116c <PB_data_is_pressed_ASM>:
    116c:	e59f1068 	ldr	r1, [pc, #104]	; 11dc <disable_PB_INT_ASM+0x14>
    1170:	e5912000 	ldr	r2, [r1]
    1174:	e0000002 	and	r0, r0, r2
    1178:	e3300000 	teq	r0, #0
    117c:	13a00001 	movne	r0, #1
    1180:	e12fff1e 	bx	lr

00001184 <read_PB_edgecap_ASM>:
    1184:	e59f1054 	ldr	r1, [pc, #84]	; 11e0 <disable_PB_INT_ASM+0x18>
    1188:	e5910000 	ldr	r0, [r1]
    118c:	e12fff1e 	bx	lr

00001190 <PB_edgecap_is_pressed_ASM>:
    1190:	e59f1048 	ldr	r1, [pc, #72]	; 11e0 <disable_PB_INT_ASM+0x18>
    1194:	e5912000 	ldr	r2, [r1]
    1198:	e0000002 	and	r0, r0, r2
    119c:	e3300000 	teq	r0, #0
    11a0:	13a00001 	movne	r0, #1
    11a4:	e12fff1e 	bx	lr

000011a8 <PB_clear_edgecp_ASM>:
    11a8:	e59f1030 	ldr	r1, [pc, #48]	; 11e0 <disable_PB_INT_ASM+0x18>
    11ac:	e5810000 	str	r0, [r1]
    11b0:	e12fff1e 	bx	lr

000011b4 <enable_PB_INT_ASM>:
    11b4:	e59f1028 	ldr	r1, [pc, #40]	; 11e4 <disable_PB_INT_ASM+0x1c>
    11b8:	e5912000 	ldr	r2, [r1]
    11bc:	e1800002 	orr	r0, r0, r2
    11c0:	e5810000 	str	r0, [r1]
    11c4:	e12fff1e 	bx	lr

000011c8 <disable_PB_INT_ASM>:
    11c8:	e59f1014 	ldr	r1, [pc, #20]	; 11e4 <disable_PB_INT_ASM+0x1c>
    11cc:	e5912000 	ldr	r2, [r1]
    11d0:	e1c00002 	bic	r0, r0, r2
    11d4:	e5810000 	str	r0, [r1]
    11d8:	e12fff1e 	bx	lr
    11dc:	ff200050 	.word	0xff200050
    11e0:	ff20005c 	.word	0xff20005c
    11e4:	ff200058 	.word	0xff200058

000011e8 <read_slider_switches_ASM>:
    11e8:	e59f1004 	ldr	r1, [pc, #4]	; 11f4 <read_slider_switches_ASM+0xc>
    11ec:	e5910000 	ldr	r0, [r1]
    11f0:	e12fff1e 	bx	lr
    11f4:	ff200040 	.word	0xff200040

000011f8 <VGA_clear_charbuff_ASM>:
    11f8:	e92d0030 	push	{r4, r5}
    11fc:	e3a02000 	mov	r2, #0
    1200:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1204:	e3a00000 	mov	r0, #0

00001208 <CHAR_LOOPX>:
    1208:	e3a01000 	mov	r1, #0
    120c:	e0834000 	add	r4, r3, r0

00001210 <CHAR_LOOPY>:
    1210:	e0845381 	add	r5, r4, r1, lsl #7
    1214:	e5c52000 	strb	r2, [r5]
    1218:	e2811001 	add	r1, r1, #1
    121c:	e351003c 	cmp	r1, #60	; 0x3c
    1220:	bafffffa 	blt	1210 <CHAR_LOOPY>
    1224:	e2800001 	add	r0, r0, #1
    1228:	e3500050 	cmp	r0, #80	; 0x50
    122c:	bafffff5 	blt	1208 <CHAR_LOOPX>
    1230:	e8bd0030 	pop	{r4, r5}
    1234:	e12fff1e 	bx	lr

00001238 <VGA_clear_pixelbuff_ASM>:
    1238:	e92d0030 	push	{r4, r5}
    123c:	e3a02000 	mov	r2, #0
    1240:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1244:	e3a00000 	mov	r0, #0

00001248 <PIXEL_LOOPX>:
    1248:	e3a01000 	mov	r1, #0
    124c:	e0834080 	add	r4, r3, r0, lsl #1

00001250 <PIXEL_LOOPY>:
    1250:	e0845501 	add	r5, r4, r1, lsl #10
    1254:	e1c520b0 	strh	r2, [r5]
    1258:	e2811001 	add	r1, r1, #1
    125c:	e35100f0 	cmp	r1, #240	; 0xf0
    1260:	bafffffa 	blt	1250 <PIXEL_LOOPY>
    1264:	e2800001 	add	r0, r0, #1
    1268:	e3500d05 	cmp	r0, #320	; 0x140
    126c:	bafffff5 	blt	1248 <PIXEL_LOOPX>
    1270:	e8bd0030 	pop	{r4, r5}
    1274:	e12fff1e 	bx	lr

00001278 <VGA_write_char_ASM>:
    1278:	e3500000 	cmp	r0, #0
    127c:	b12fff1e 	bxlt	lr
    1280:	e3510000 	cmp	r1, #0
    1284:	b12fff1e 	bxlt	lr
    1288:	e350004f 	cmp	r0, #79	; 0x4f
    128c:	c12fff1e 	bxgt	lr
    1290:	e351003b 	cmp	r1, #59	; 0x3b
    1294:	c12fff1e 	bxgt	lr
    1298:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    129c:	e0833000 	add	r3, r3, r0
    12a0:	e0833381 	add	r3, r3, r1, lsl #7
    12a4:	e5c32000 	strb	r2, [r3]
    12a8:	e12fff1e 	bx	lr

000012ac <VGA_write_byte_ASM>:
    12ac:	e3500000 	cmp	r0, #0
    12b0:	b12fff1e 	bxlt	lr
    12b4:	e3510000 	cmp	r1, #0
    12b8:	b12fff1e 	bxlt	lr
    12bc:	e350004e 	cmp	r0, #78	; 0x4e
    12c0:	c12fff1e 	bxgt	lr
    12c4:	e351003b 	cmp	r1, #59	; 0x3b
    12c8:	c12fff1e 	bxgt	lr
    12cc:	e92d0030 	push	{r4, r5}
    12d0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    12d4:	e20250f0 	and	r5, r2, #240	; 0xf0
    12d8:	e1a05225 	lsr	r5, r5, #4
    12dc:	e202400f 	and	r4, r2, #15
    12e0:	e59f2068 	ldr	r2, [pc, #104]	; 1350 <HEX_ASCII+0x10>
    12e4:	e7d25005 	ldrb	r5, [r2, r5]
    12e8:	e7d24004 	ldrb	r4, [r2, r4]
    12ec:	e0833000 	add	r3, r3, r0
    12f0:	e0833381 	add	r3, r3, r1, lsl #7
    12f4:	e5c35000 	strb	r5, [r3]
    12f8:	e2833001 	add	r3, r3, #1
    12fc:	e5c34000 	strb	r4, [r3]
    1300:	e8bd0030 	pop	{r4, r5}
    1304:	e12fff1e 	bx	lr

00001308 <VGA_draw_point_ASM>:
    1308:	e59f3044 	ldr	r3, [pc, #68]	; 1354 <HEX_ASCII+0x14>
    130c:	e3500000 	cmp	r0, #0
    1310:	b12fff1e 	bxlt	lr
    1314:	e3510000 	cmp	r1, #0
    1318:	b12fff1e 	bxlt	lr
    131c:	e1500003 	cmp	r0, r3
    1320:	c12fff1e 	bxgt	lr
    1324:	e35100ef 	cmp	r1, #239	; 0xef
    1328:	c12fff1e 	bxgt	lr
    132c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1330:	e0833080 	add	r3, r3, r0, lsl #1
    1334:	e0833501 	add	r3, r3, r1, lsl #10
    1338:	e1c320b0 	strh	r2, [r3]
    133c:	e12fff1e 	bx	lr

00001340 <HEX_ASCII>:
    1340:	33323130 	.word	0x33323130
    1344:	37363534 	.word	0x37363534
    1348:	42413938 	.word	0x42413938
    134c:	46454443 	.word	0x46454443
    1350:	00001340 	.word	0x00001340
    1354:	0000013f 	.word	0x0000013f

00001358 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1358:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    135c:	e28db000 	add	r11, sp, #0
    1360:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    1364:	e3a030d3 	mov	r3, #211	; 0xd3
    1368:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    136c:	e51b3008 	ldr	r3, [r11, #-8]
    1370:	e129f003 	msr	CPSR_fc, r3
}
    1374:	e28bd000 	add	sp, r11, #0
    1378:	e8bd0800 	ldmfd	sp!, {r11}
    137c:	e12fff1e 	bx	lr

00001380 <enable_A9_interrupts>:

void enable_A9_interrupts() {
    1380:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1384:	e28db000 	add	r11, sp, #0
    1388:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    138c:	e3a03053 	mov	r3, #83	; 0x53
    1390:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1394:	e51b3008 	ldr	r3, [r11, #-8]
    1398:	e129f003 	msr	CPSR_fc, r3
}
    139c:	e28bd000 	add	sp, r11, #0
    13a0:	e8bd0800 	ldmfd	sp!, {r11}
    13a4:	e12fff1e 	bx	lr

000013a8 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    13a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13ac:	e28db000 	add	r11, sp, #0
    13b0:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    13b4:	e3e03007 	mvn	r3, #7
    13b8:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    13bc:	e3a030d2 	mov	r3, #210	; 0xd2
    13c0:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    13c4:	e51b300c 	ldr	r3, [r11, #-12]
    13c8:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    13cc:	e51b3008 	ldr	r3, [r11, #-8]
    13d0:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    13d4:	e3a030d3 	mov	r3, #211	; 0xd3
    13d8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    13dc:	e51b300c 	ldr	r3, [r11, #-12]
    13e0:	e129f003 	msr	CPSR_fc, r3
}
    13e4:	e28bd000 	add	sp, r11, #0
    13e8:	e8bd0800 	ldmfd	sp!, {r11}
    13ec:	e12fff1e 	bx	lr

000013f0 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    13f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13f4:	e28db000 	add	r11, sp, #0
    13f8:	e24dd01c 	sub	sp, sp, #28
    13fc:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1400:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    1404:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1408:	e1a031c3 	asr	r3, r3, #3
    140c:	e3c33003 	bic	r3, r3, #3
    1410:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    1414:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1418:	e203301f 	and	r3, r3, #31
    141c:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    1420:	e3a02001 	mov	r2, #1
    1424:	e51b300c 	ldr	r3, [r11, #-12]
    1428:	e1a03312 	lsl	r3, r2, r3
    142c:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1430:	e51b3008 	ldr	r3, [r11, #-8]
    1434:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1438:	e2433c03 	sub	r3, r3, #768	; 0x300
    143c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1440:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1444:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1448:	e5921000 	ldr	r1, [r2]
    144c:	e51b2010 	ldr	r2, [r11, #-16]
    1450:	e1812002 	orr	r2, r1, r2
    1454:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1458:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    145c:	e3c33003 	bic	r3, r3, #3
    1460:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    1464:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1468:	e2033003 	and	r3, r3, #3
    146c:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1470:	e51b2008 	ldr	r2, [r11, #-8]
    1474:	e51b300c 	ldr	r3, [r11, #-12]
    1478:	e0823003 	add	r3, r2, r3
    147c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    1480:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    1484:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1488:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    148c:	e6ef2072 	uxtb	r2, r2
    1490:	e5c32000 	strb	r2, [r3]
}
    1494:	e28bd000 	add	sp, r11, #0
    1498:	e8bd0800 	ldmfd	sp!, {r11}
    149c:	e12fff1e 	bx	lr

000014a0 <config_GIC>:

void config_GIC(int len, int* IDs) {
    14a0:	e92d4800 	push	{r11, lr}
    14a4:	e28db004 	add	r11, sp, #4
    14a8:	e24dd010 	sub	sp, sp, #16
    14ac:	e50b0010 	str	r0, [r11, #-16]
    14b0:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    14b4:	e3a03000 	mov	r3, #0
    14b8:	e50b3008 	str	r3, [r11, #-8]
    14bc:	ea00000a 	b	14ec <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    14c0:	e51b3008 	ldr	r3, [r11, #-8]
    14c4:	e1a03103 	lsl	r3, r3, #2
    14c8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    14cc:	e0823003 	add	r3, r2, r3
    14d0:	e5933000 	ldr	r3, [r3]
    14d4:	e1a00003 	mov	r0, r3
    14d8:	e3a01001 	mov	r1, #1
    14dc:	ebffffc3 	bl	13f0 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    14e0:	e51b3008 	ldr	r3, [r11, #-8]
    14e4:	e2833001 	add	r3, r3, #1
    14e8:	e50b3008 	str	r3, [r11, #-8]
    14ec:	e51b2008 	ldr	r2, [r11, #-8]
    14f0:	e51b3010 	ldr	r3, [r11, #-16]
    14f4:	e1520003 	cmp	r2, r3
    14f8:	bafffff0 	blt	14c0 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    14fc:	e30c3104 	movw	r3, #49412	; 0xc104
    1500:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1504:	e30f2fff 	movw	r2, #65535	; 0xffff
    1508:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    150c:	e3a03cc1 	mov	r3, #49408	; 0xc100
    1510:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1514:	e3a02001 	mov	r2, #1
    1518:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    151c:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1520:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1524:	e3a02001 	mov	r2, #1
    1528:	e5832000 	str	r2, [r3]
}
    152c:	e24bd004 	sub	sp, r11, #4
    1530:	e8bd8800 	pop	{r11, pc}

00001534 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    1534:	e24ee004 	sub	lr, lr, #4
    1538:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    153c:	e28db018 	add	r11, sp, #24
    1540:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    1544:	e30c310c 	movw	r3, #49420	; 0xc10c
    1548:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    154c:	e5933000 	ldr	r3, [r3]
    1550:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    1554:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1558:	e3530053 	cmp	r3, #83	; 0x53
    155c:	0a00003d 	beq	1658 <__cs3_isr_irq+0x124>
    1560:	e3530053 	cmp	r3, #83	; 0x53
    1564:	ca000011 	bgt	15b0 <__cs3_isr_irq+0x7c>
    1568:	e353004e 	cmp	r3, #78	; 0x4e
    156c:	0a000031 	beq	1638 <__cs3_isr_irq+0x104>
    1570:	e353004e 	cmp	r3, #78	; 0x4e
    1574:	ca000006 	bgt	1594 <__cs3_isr_irq+0x60>
    1578:	e3530048 	cmp	r3, #72	; 0x48
    157c:	0a000029 	beq	1628 <__cs3_isr_irq+0xf4>
    1580:	e3530049 	cmp	r3, #73	; 0x49
    1584:	0a000029 	beq	1630 <__cs3_isr_irq+0xfc>
    1588:	e353001d 	cmp	r3, #29
    158c:	0a000019 	beq	15f8 <__cs3_isr_irq+0xc4>
    1590:	ea000036 	b	1670 <__cs3_isr_irq+0x13c>
    1594:	e3530050 	cmp	r3, #80	; 0x50
    1598:	0a00002a 	beq	1648 <__cs3_isr_irq+0x114>
    159c:	e3530050 	cmp	r3, #80	; 0x50
    15a0:	ba000026 	blt	1640 <__cs3_isr_irq+0x10c>
    15a4:	e3530051 	cmp	r3, #81	; 0x51
    15a8:	0a000028 	beq	1650 <__cs3_isr_irq+0x11c>
    15ac:	ea00002f 	b	1670 <__cs3_isr_irq+0x13c>
    15b0:	e35300c7 	cmp	r3, #199	; 0xc7
    15b4:	0a000013 	beq	1608 <__cs3_isr_irq+0xd4>
    15b8:	e35300c7 	cmp	r3, #199	; 0xc7
    15bc:	ca000006 	bgt	15dc <__cs3_isr_irq+0xa8>
    15c0:	e3530059 	cmp	r3, #89	; 0x59
    15c4:	0a000027 	beq	1668 <__cs3_isr_irq+0x134>
    15c8:	e35300c5 	cmp	r3, #197	; 0xc5
    15cc:	0a00000b 	beq	1600 <__cs3_isr_irq+0xcc>
    15d0:	e3530054 	cmp	r3, #84	; 0x54
    15d4:	0a000021 	beq	1660 <__cs3_isr_irq+0x12c>
    15d8:	ea000024 	b	1670 <__cs3_isr_irq+0x13c>
    15dc:	e35300c9 	cmp	r3, #201	; 0xc9
    15e0:	0a00000c 	beq	1618 <__cs3_isr_irq+0xe4>
    15e4:	e35300c9 	cmp	r3, #201	; 0xc9
    15e8:	ba000008 	blt	1610 <__cs3_isr_irq+0xdc>
    15ec:	e35300ca 	cmp	r3, #202	; 0xca
    15f0:	0a00000a 	beq	1620 <__cs3_isr_irq+0xec>
    15f4:	ea00001d 	b	1670 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    15f8:	ebfffdbf 	bl	cfc <A9_PRIV_TIM_ISR>
    15fc:	ea00001c 	b	1674 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    1600:	ebfffdbe 	bl	d00 <HPS_GPIO1_ISR>
    1604:	ea00001a 	b	1674 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1608:	ebfffdbd 	bl	d04 <HPS_TIM0_ISR>
    160c:	ea000018 	b	1674 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    1610:	ebfffdc3 	bl	d24 <HPS_TIM1_ISR>
    1614:	ea000016 	b	1674 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1618:	ebfffdc2 	bl	d28 <HPS_TIM2_ISR>
    161c:	ea000014 	b	1674 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    1620:	ebfffdc1 	bl	d2c <HPS_TIM3_ISR>
    1624:	ea000012 	b	1674 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1628:	ebfffdc0 	bl	d30 <FPGA_INTERVAL_TIM_ISR>
    162c:	ea000010 	b	1674 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    1630:	ebfffdbf 	bl	d34 <FPGA_PB_KEYS_ISR>
    1634:	ea00000e 	b	1674 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1638:	ebfffdbe 	bl	d38 <FPGA_Audio_ISR>
    163c:	ea00000c 	b	1674 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1640:	ebfffdbd 	bl	d3c <FPGA_PS2_ISR>
    1644:	ea00000a 	b	1674 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1648:	ebfffdbc 	bl	d40 <FPGA_JTAG_ISR>
    164c:	ea000008 	b	1674 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1650:	ebfffdbb 	bl	d44 <FPGA_IrDA_ISR>
    1654:	ea000006 	b	1674 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1658:	ebfffdba 	bl	d48 <FPGA_JP1_ISR>
    165c:	ea000004 	b	1674 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1660:	ebfffdb9 	bl	d4c <FPGA_JP2_ISR>
    1664:	ea000002 	b	1674 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1668:	ebfffdb8 	bl	d50 <FPGA_PS2_DUAL_ISR>
    166c:	ea000000 	b	1674 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1670:	eafffffe 	b	1670 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    1674:	e30c3110 	movw	r3, #49424	; 0xc110
    1678:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    167c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1680:	e5832000 	str	r2, [r3]
}
    1684:	e24bd018 	sub	sp, r11, #24
    1688:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

0000168c <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    168c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1690:	e28db000 	add	r11, sp, #0
	while(1);
    1694:	eafffffe 	b	1694 <__cs3_reset+0x8>

00001698 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    1698:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    169c:	e28db000 	add	r11, sp, #0
	while(1);
    16a0:	eafffffe 	b	16a0 <__cs3_isr_undef+0x8>

000016a4 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    16a4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    16a8:	e28db000 	add	r11, sp, #0
	while(1);
    16ac:	eafffffe 	b	16ac <__cs3_isr_swi+0x8>

000016b0 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    16b0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    16b4:	e28db000 	add	r11, sp, #0
	while(1);
    16b8:	eafffffe 	b	16b8 <__cs3_isr_pabort+0x8>

000016bc <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    16bc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    16c0:	e28db000 	add	r11, sp, #0
	while(1);
    16c4:	eafffffe 	b	16c4 <__cs3_isr_dabort+0x8>

000016c8 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    16c8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    16cc:	e28db000 	add	r11, sp, #0
	while(1);
    16d0:	eafffffe 	b	16d0 <__cs3_isr_fiq+0x8>

000016d4 <fix_bug>:
}

void fix_bug() {
    16d4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    16d8:	e28db000 	add	r11, sp, #0
    16dc:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    16e0:	e30d3198 	movw	r3, #53656	; 0xd198
    16e4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    16e8:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    16ec:	e51b3008 	ldr	r3, [r11, #-8]
    16f0:	e3a02703 	mov	r2, #786432	; 0xc0000
    16f4:	e5832000 	str	r2, [r3]
}
    16f8:	e28bd000 	add	sp, r11, #0
    16fc:	e8bd0800 	ldmfd	sp!, {r11}
    1700:	e12fff1e 	bx	lr

00001704 <int_setup>:

void int_setup(int len, int* IDs) {
    1704:	e92d4800 	push	{r11, lr}
    1708:	e28db004 	add	r11, sp, #4
    170c:	e24dd008 	sub	sp, sp, #8
    1710:	e50b0008 	str	r0, [r11, #-8]
    1714:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1718:	ebffff0e 	bl	1358 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    171c:	ebffff21 	bl	13a8 <set_A9_IRQ_stack>
	fix_bug();
    1720:	ebffffeb 	bl	16d4 <fix_bug>
	config_GIC(len, IDs);
    1724:	e51b0008 	ldr	r0, [r11, #-8]
    1728:	e51b100c 	ldr	r1, [r11, #-12]
    172c:	ebffff5b 	bl	14a0 <config_GIC>
	enable_A9_interrupts();
    1730:	ebffff12 	bl	1380 <enable_A9_interrupts>
}
    1734:	e24bd004 	sub	sp, r11, #4
    1738:	e8bd8800 	pop	{r11, pc}

0000173c <__aeabi_drsub>:
    173c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1740:	ea000000 	b	1748 <__adddf3>

00001744 <__aeabi_dsub>:
    1744:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001748 <__adddf3>:
    1748:	e92d4030 	push	{r4, r5, lr}
    174c:	e1a04081 	lsl	r4, r1, #1
    1750:	e1a05083 	lsl	r5, r3, #1
    1754:	e1340005 	teq	r4, r5
    1758:	01300002 	teqeq	r0, r2
    175c:	1194c000 	orrsne	r12, r4, r0
    1760:	1195c002 	orrsne	r12, r5, r2
    1764:	11f0cac4 	mvnsne	r12, r4, asr #21
    1768:	11f0cac5 	mvnsne	r12, r5, asr #21
    176c:	0a00008c 	beq	19a4 <__adddf3+0x25c>
    1770:	e1a04aa4 	lsr	r4, r4, #21
    1774:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1778:	b2655000 	rsblt	r5, r5, #0
    177c:	da000006 	ble	179c <__adddf3+0x54>
    1780:	e0844005 	add	r4, r4, r5
    1784:	e0202002 	eor	r2, r0, r2
    1788:	e0213003 	eor	r3, r1, r3
    178c:	e0220000 	eor	r0, r2, r0
    1790:	e0231001 	eor	r1, r3, r1
    1794:	e0202002 	eor	r2, r0, r2
    1798:	e0213003 	eor	r3, r1, r3
    179c:	e3550036 	cmp	r5, #54	; 0x36
    17a0:	88bd4030 	pophi	{r4, r5, lr}
    17a4:	812fff1e 	bxhi	lr
    17a8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    17ac:	e1a01601 	lsl	r1, r1, #12
    17b0:	e3a0c601 	mov	r12, #1048576	; 0x100000
    17b4:	e18c1621 	orr	r1, r12, r1, lsr #12
    17b8:	0a000001 	beq	17c4 <__adddf3+0x7c>
    17bc:	e2700000 	rsbs	r0, r0, #0
    17c0:	e2e11000 	rsc	r1, r1, #0
    17c4:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    17c8:	e1a03603 	lsl	r3, r3, #12
    17cc:	e18c3623 	orr	r3, r12, r3, lsr #12
    17d0:	0a000001 	beq	17dc <__adddf3+0x94>
    17d4:	e2722000 	rsbs	r2, r2, #0
    17d8:	e2e33000 	rsc	r3, r3, #0
    17dc:	e1340005 	teq	r4, r5
    17e0:	0a000069 	beq	198c <__adddf3+0x244>
    17e4:	e2444001 	sub	r4, r4, #1
    17e8:	e275e020 	rsbs	lr, r5, #32
    17ec:	ba000005 	blt	1808 <__adddf3+0xc0>
    17f0:	e1a0ce12 	lsl	r12, r2, lr
    17f4:	e0900532 	adds	r0, r0, r2, lsr r5
    17f8:	e2a11000 	adc	r1, r1, #0
    17fc:	e0900e13 	adds	r0, r0, r3, lsl lr
    1800:	e0b11553 	adcs	r1, r1, r3, asr r5
    1804:	ea000006 	b	1824 <__adddf3+0xdc>
    1808:	e2455020 	sub	r5, r5, #32
    180c:	e28ee020 	add	lr, lr, #32
    1810:	e3520001 	cmp	r2, #1
    1814:	e1a0ce13 	lsl	r12, r3, lr
    1818:	238cc002 	orrcs	r12, r12, #2
    181c:	e0900553 	adds	r0, r0, r3, asr r5
    1820:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1824:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1828:	5a000002 	bpl	1838 <__adddf3+0xf0>
    182c:	e27cc000 	rsbs	r12, r12, #0
    1830:	e2f00000 	rscs	r0, r0, #0
    1834:	e2e11000 	rsc	r1, r1, #0
    1838:	e3510601 	cmp	r1, #1048576	; 0x100000
    183c:	3a00000f 	bcc	1880 <__adddf3+0x138>
    1840:	e3510602 	cmp	r1, #2097152	; 0x200000
    1844:	3a000006 	bcc	1864 <__adddf3+0x11c>
    1848:	e1b010a1 	lsrs	r1, r1, #1
    184c:	e1b00060 	rrxs	r0, r0
    1850:	e1a0c06c 	rrx	r12, r12
    1854:	e2844001 	add	r4, r4, #1
    1858:	e1a02a84 	lsl	r2, r4, #21
    185c:	e3720501 	cmn	r2, #4194304	; 0x400000
    1860:	2a00006b 	bcs	1a14 <__adddf3+0x2cc>
    1864:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1868:	01b0c0a0 	lsrseq	r12, r0, #1
    186c:	e2b00000 	adcs	r0, r0, #0
    1870:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1874:	e1811005 	orr	r1, r1, r5
    1878:	e8bd4030 	pop	{r4, r5, lr}
    187c:	e12fff1e 	bx	lr
    1880:	e1b0c08c 	lsls	r12, r12, #1
    1884:	e0b00000 	adcs	r0, r0, r0
    1888:	e0a11001 	adc	r1, r1, r1
    188c:	e3110601 	tst	r1, #1048576	; 0x100000
    1890:	e2444001 	sub	r4, r4, #1
    1894:	1afffff2 	bne	1864 <__adddf3+0x11c>
    1898:	e3310000 	teq	r1, #0
    189c:	13a03014 	movne	r3, #20
    18a0:	03a03034 	moveq	r3, #52	; 0x34
    18a4:	01a01000 	moveq	r1, r0
    18a8:	03a00000 	moveq	r0, #0
    18ac:	e1a02001 	mov	r2, r1
    18b0:	e3520801 	cmp	r2, #65536	; 0x10000
    18b4:	21a02822 	lsrcs	r2, r2, #16
    18b8:	22433010 	subcs	r3, r3, #16
    18bc:	e3520c01 	cmp	r2, #256	; 0x100
    18c0:	21a02422 	lsrcs	r2, r2, #8
    18c4:	22433008 	subcs	r3, r3, #8
    18c8:	e3520010 	cmp	r2, #16
    18cc:	21a02222 	lsrcs	r2, r2, #4
    18d0:	22433004 	subcs	r3, r3, #4
    18d4:	e3520004 	cmp	r2, #4
    18d8:	22433002 	subcs	r3, r3, #2
    18dc:	304330a2 	subcc	r3, r3, r2, lsr #1
    18e0:	e04331a2 	sub	r3, r3, r2, lsr #3
    18e4:	e2532020 	subs	r2, r3, #32
    18e8:	aa000007 	bge	190c <__adddf3+0x1c4>
    18ec:	e292200c 	adds	r2, r2, #12
    18f0:	da000004 	ble	1908 <__adddf3+0x1c0>
    18f4:	e282c014 	add	r12, r2, #20
    18f8:	e262200c 	rsb	r2, r2, #12
    18fc:	e1a00c11 	lsl	r0, r1, r12
    1900:	e1a01231 	lsr	r1, r1, r2
    1904:	ea000004 	b	191c <__adddf3+0x1d4>
    1908:	e2822014 	add	r2, r2, #20
    190c:	d262c020 	rsble	r12, r2, #32
    1910:	e1a01211 	lsl	r1, r1, r2
    1914:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1918:	d1a00210 	lslle	r0, r0, r2
    191c:	e0544003 	subs	r4, r4, r3
    1920:	a0811a04 	addge	r1, r1, r4, lsl #20
    1924:	a1811005 	orrge	r1, r1, r5
    1928:	a8bd4030 	popge	{r4, r5, lr}
    192c:	a12fff1e 	bxge	lr
    1930:	e1e04004 	mvn	r4, r4
    1934:	e254401f 	subs	r4, r4, #31
    1938:	aa00000f 	bge	197c <__adddf3+0x234>
    193c:	e294400c 	adds	r4, r4, #12
    1940:	ca000006 	bgt	1960 <__adddf3+0x218>
    1944:	e2844014 	add	r4, r4, #20
    1948:	e2642020 	rsb	r2, r4, #32
    194c:	e1a00430 	lsr	r0, r0, r4
    1950:	e1800211 	orr	r0, r0, r1, lsl r2
    1954:	e1851431 	orr	r1, r5, r1, lsr r4
    1958:	e8bd4030 	pop	{r4, r5, lr}
    195c:	e12fff1e 	bx	lr
    1960:	e264400c 	rsb	r4, r4, #12
    1964:	e2642020 	rsb	r2, r4, #32
    1968:	e1a00230 	lsr	r0, r0, r2
    196c:	e1800411 	orr	r0, r0, r1, lsl r4
    1970:	e1a01005 	mov	r1, r5
    1974:	e8bd4030 	pop	{r4, r5, lr}
    1978:	e12fff1e 	bx	lr
    197c:	e1a00431 	lsr	r0, r1, r4
    1980:	e1a01005 	mov	r1, r5
    1984:	e8bd4030 	pop	{r4, r5, lr}
    1988:	e12fff1e 	bx	lr
    198c:	e3340000 	teq	r4, #0
    1990:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1994:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1998:	02844001 	addeq	r4, r4, #1
    199c:	12455001 	subne	r5, r5, #1
    19a0:	eaffff8f 	b	17e4 <__adddf3+0x9c>
    19a4:	e1f0cac4 	mvns	r12, r4, asr #21
    19a8:	11f0cac5 	mvnsne	r12, r5, asr #21
    19ac:	0a00001d 	beq	1a28 <__adddf3+0x2e0>
    19b0:	e1340005 	teq	r4, r5
    19b4:	01300002 	teqeq	r0, r2
    19b8:	0a000004 	beq	19d0 <__adddf3+0x288>
    19bc:	e194c000 	orrs	r12, r4, r0
    19c0:	01a01003 	moveq	r1, r3
    19c4:	01a00002 	moveq	r0, r2
    19c8:	e8bd4030 	pop	{r4, r5, lr}
    19cc:	e12fff1e 	bx	lr
    19d0:	e1310003 	teq	r1, r3
    19d4:	13a01000 	movne	r1, #0
    19d8:	13a00000 	movne	r0, #0
    19dc:	18bd4030 	popne	{r4, r5, lr}
    19e0:	112fff1e 	bxne	lr
    19e4:	e1b0caa4 	lsrs	r12, r4, #21
    19e8:	1a000004 	bne	1a00 <__adddf3+0x2b8>
    19ec:	e1b00080 	lsls	r0, r0, #1
    19f0:	e0b11001 	adcs	r1, r1, r1
    19f4:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    19f8:	e8bd4030 	pop	{r4, r5, lr}
    19fc:	e12fff1e 	bx	lr
    1a00:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1a04:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1a08:	38bd4030 	popcc	{r4, r5, lr}
    1a0c:	312fff1e 	bxcc	lr
    1a10:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1a14:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1a18:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1a1c:	e3a00000 	mov	r0, #0
    1a20:	e8bd4030 	pop	{r4, r5, lr}
    1a24:	e12fff1e 	bx	lr
    1a28:	e1f0cac4 	mvns	r12, r4, asr #21
    1a2c:	11a01003 	movne	r1, r3
    1a30:	11a00002 	movne	r0, r2
    1a34:	01f0cac5 	mvnseq	r12, r5, asr #21
    1a38:	11a03001 	movne	r3, r1
    1a3c:	11a02000 	movne	r2, r0
    1a40:	e1904601 	orrs	r4, r0, r1, lsl #12
    1a44:	01925603 	orrseq	r5, r2, r3, lsl #12
    1a48:	01310003 	teqeq	r1, r3
    1a4c:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1a50:	e8bd4030 	pop	{r4, r5, lr}
    1a54:	e12fff1e 	bx	lr

00001a58 <__aeabi_ui2d>:
    1a58:	e3300000 	teq	r0, #0
    1a5c:	03a01000 	moveq	r1, #0
    1a60:	012fff1e 	bxeq	lr
    1a64:	e92d4030 	push	{r4, r5, lr}
    1a68:	e3a04b01 	mov	r4, #1024	; 0x400
    1a6c:	e2844032 	add	r4, r4, #50	; 0x32
    1a70:	e3a05000 	mov	r5, #0
    1a74:	e3a01000 	mov	r1, #0
    1a78:	eaffff86 	b	1898 <__adddf3+0x150>

00001a7c <__aeabi_i2d>:
    1a7c:	e3300000 	teq	r0, #0
    1a80:	03a01000 	moveq	r1, #0
    1a84:	012fff1e 	bxeq	lr
    1a88:	e92d4030 	push	{r4, r5, lr}
    1a8c:	e3a04b01 	mov	r4, #1024	; 0x400
    1a90:	e2844032 	add	r4, r4, #50	; 0x32
    1a94:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1a98:	42600000 	rsbmi	r0, r0, #0
    1a9c:	e3a01000 	mov	r1, #0
    1aa0:	eaffff7c 	b	1898 <__adddf3+0x150>

00001aa4 <__aeabi_f2d>:
    1aa4:	e1b02080 	lsls	r2, r0, #1
    1aa8:	e1a011c2 	asr	r1, r2, #3
    1aac:	e1a01061 	rrx	r1, r1
    1ab0:	e1a00e02 	lsl	r0, r2, #28
    1ab4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1ab8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1abc:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1ac0:	112fff1e 	bxne	lr
    1ac4:	e3320000 	teq	r2, #0
    1ac8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1acc:	012fff1e 	bxeq	lr
    1ad0:	e92d4030 	push	{r4, r5, lr}
    1ad4:	e3a04d0e 	mov	r4, #896	; 0x380
    1ad8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1adc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1ae0:	eaffff6c 	b	1898 <__adddf3+0x150>

00001ae4 <__aeabi_ul2d>:
    1ae4:	e1902001 	orrs	r2, r0, r1
    1ae8:	012fff1e 	bxeq	lr
    1aec:	e92d4030 	push	{r4, r5, lr}
    1af0:	e3a05000 	mov	r5, #0
    1af4:	ea000006 	b	1b14 <__aeabi_l2d+0x1c>

00001af8 <__aeabi_l2d>:
    1af8:	e1902001 	orrs	r2, r0, r1
    1afc:	012fff1e 	bxeq	lr
    1b00:	e92d4030 	push	{r4, r5, lr}
    1b04:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1b08:	5a000001 	bpl	1b14 <__aeabi_l2d+0x1c>
    1b0c:	e2700000 	rsbs	r0, r0, #0
    1b10:	e2e11000 	rsc	r1, r1, #0
    1b14:	e3a04b01 	mov	r4, #1024	; 0x400
    1b18:	e2844032 	add	r4, r4, #50	; 0x32
    1b1c:	e1b0cb21 	lsrs	r12, r1, #22
    1b20:	0affff44 	beq	1838 <__adddf3+0xf0>
    1b24:	e3a02003 	mov	r2, #3
    1b28:	e1b0c1ac 	lsrs	r12, r12, #3
    1b2c:	12822003 	addne	r2, r2, #3
    1b30:	e1b0c1ac 	lsrs	r12, r12, #3
    1b34:	12822003 	addne	r2, r2, #3
    1b38:	e08221ac 	add	r2, r2, r12, lsr #3
    1b3c:	e2623020 	rsb	r3, r2, #32
    1b40:	e1a0c310 	lsl	r12, r0, r3
    1b44:	e1a00230 	lsr	r0, r0, r2
    1b48:	e1800311 	orr	r0, r0, r1, lsl r3
    1b4c:	e1a01231 	lsr	r1, r1, r2
    1b50:	e0844002 	add	r4, r4, r2
    1b54:	eaffff37 	b	1838 <__adddf3+0xf0>

00001b58 <__aeabi_dmul>:
    1b58:	e92d4070 	push	{r4, r5, r6, lr}
    1b5c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1b60:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1b64:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1b68:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1b6c:	1134000c 	teqne	r4, r12
    1b70:	1135000c 	teqne	r5, r12
    1b74:	0b000075 	bleq	1d50 <__aeabi_dmul+0x1f8>
    1b78:	e0844005 	add	r4, r4, r5
    1b7c:	e0216003 	eor	r6, r1, r3
    1b80:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1b84:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1b88:	e1905601 	orrs	r5, r0, r1, lsl #12
    1b8c:	11925603 	orrsne	r5, r2, r3, lsl #12
    1b90:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1b94:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1b98:	0a00001d 	beq	1c14 <__aeabi_dmul+0xbc>
    1b9c:	e08ec290 	umull	r12, lr, r0, r2
    1ba0:	e3a05000 	mov	r5, #0
    1ba4:	e0a5e291 	umlal	lr, r5, r1, r2
    1ba8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1bac:	e0a5e390 	umlal	lr, r5, r0, r3
    1bb0:	e3a06000 	mov	r6, #0
    1bb4:	e0a65391 	umlal	r5, r6, r1, r3
    1bb8:	e33c0000 	teq	r12, #0
    1bbc:	138ee001 	orrne	lr, lr, #1
    1bc0:	e24440ff 	sub	r4, r4, #255	; 0xff
    1bc4:	e3560c02 	cmp	r6, #512	; 0x200
    1bc8:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1bcc:	2a000002 	bcs	1bdc <__aeabi_dmul+0x84>
    1bd0:	e1b0e08e 	lsls	lr, lr, #1
    1bd4:	e0b55005 	adcs	r5, r5, r5
    1bd8:	e0a66006 	adc	r6, r6, r6
    1bdc:	e1821586 	orr	r1, r2, r6, lsl #11
    1be0:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1be4:	e1a00585 	lsl	r0, r5, #11
    1be8:	e1800aae 	orr	r0, r0, lr, lsr #21
    1bec:	e1a0e58e 	lsl	lr, lr, #11
    1bf0:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1bf4:	835c0c07 	cmphi	r12, #1792	; 0x700
    1bf8:	8a000011 	bhi	1c44 <__aeabi_dmul+0xec>
    1bfc:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1c00:	01b0e0a0 	lsrseq	lr, r0, #1
    1c04:	e2b00000 	adcs	r0, r0, #0
    1c08:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1c0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1c10:	e12fff1e 	bx	lr
    1c14:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1c18:	e1861001 	orr	r1, r6, r1
    1c1c:	e1800002 	orr	r0, r0, r2
    1c20:	e0211003 	eor	r1, r1, r3
    1c24:	e05440ac 	subs	r4, r4, r12, lsr #1
    1c28:	c074500c 	rsbsgt	r5, r4, r12
    1c2c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1c30:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1c34:	c12fff1e 	bxgt	lr
    1c38:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1c3c:	e3a0e000 	mov	lr, #0
    1c40:	e2544001 	subs	r4, r4, #1
    1c44:	ca00005d 	bgt	1dc0 <__aeabi_dmul+0x268>
    1c48:	e3740036 	cmn	r4, #54	; 0x36
    1c4c:	d3a00000 	movle	r0, #0
    1c50:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1c54:	d8bd4070 	pople	{r4, r5, r6, lr}
    1c58:	d12fff1e 	bxle	lr
    1c5c:	e2644000 	rsb	r4, r4, #0
    1c60:	e2544020 	subs	r4, r4, #32
    1c64:	aa00001a 	bge	1cd4 <__aeabi_dmul+0x17c>
    1c68:	e294400c 	adds	r4, r4, #12
    1c6c:	ca00000c 	bgt	1ca4 <__aeabi_dmul+0x14c>
    1c70:	e2844014 	add	r4, r4, #20
    1c74:	e2645020 	rsb	r5, r4, #32
    1c78:	e1a03510 	lsl	r3, r0, r5
    1c7c:	e1a00430 	lsr	r0, r0, r4
    1c80:	e1800511 	orr	r0, r0, r1, lsl r5
    1c84:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1c88:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1c8c:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1c90:	e0a21431 	adc	r1, r2, r1, lsr r4
    1c94:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1c98:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1c9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ca0:	e12fff1e 	bx	lr
    1ca4:	e264400c 	rsb	r4, r4, #12
    1ca8:	e2645020 	rsb	r5, r4, #32
    1cac:	e1a03410 	lsl	r3, r0, r4
    1cb0:	e1a00530 	lsr	r0, r0, r5
    1cb4:	e1800411 	orr	r0, r0, r1, lsl r4
    1cb8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1cbc:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1cc0:	e2a11000 	adc	r1, r1, #0
    1cc4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1cc8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1ccc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1cd0:	e12fff1e 	bx	lr
    1cd4:	e2645020 	rsb	r5, r4, #32
    1cd8:	e18ee510 	orr	lr, lr, r0, lsl r5
    1cdc:	e1a03430 	lsr	r3, r0, r4
    1ce0:	e1833511 	orr	r3, r3, r1, lsl r5
    1ce4:	e1a00431 	lsr	r0, r1, r4
    1ce8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1cec:	e1c00431 	bic	r0, r0, r1, lsr r4
    1cf0:	e0800fa3 	add	r0, r0, r3, lsr #31
    1cf4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1cf8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1cfc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d00:	e12fff1e 	bx	lr
    1d04:	e3340000 	teq	r4, #0
    1d08:	1a000008 	bne	1d30 <__aeabi_dmul+0x1d8>
    1d0c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1d10:	e1b00080 	lsls	r0, r0, #1
    1d14:	e0a11001 	adc	r1, r1, r1
    1d18:	e3110601 	tst	r1, #1048576	; 0x100000
    1d1c:	02444001 	subeq	r4, r4, #1
    1d20:	0afffffa 	beq	1d10 <__aeabi_dmul+0x1b8>
    1d24:	e1811006 	orr	r1, r1, r6
    1d28:	e3350000 	teq	r5, #0
    1d2c:	112fff1e 	bxne	lr
    1d30:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1d34:	e1b02082 	lsls	r2, r2, #1
    1d38:	e0a33003 	adc	r3, r3, r3
    1d3c:	e3130601 	tst	r3, #1048576	; 0x100000
    1d40:	02455001 	subeq	r5, r5, #1
    1d44:	0afffffa 	beq	1d34 <__aeabi_dmul+0x1dc>
    1d48:	e1833006 	orr	r3, r3, r6
    1d4c:	e12fff1e 	bx	lr
    1d50:	e134000c 	teq	r4, r12
    1d54:	e00c5a23 	and	r5, r12, r3, lsr #20
    1d58:	1135000c 	teqne	r5, r12
    1d5c:	0a000007 	beq	1d80 <__aeabi_dmul+0x228>
    1d60:	e1906081 	orrs	r6, r0, r1, lsl #1
    1d64:	11926083 	orrsne	r6, r2, r3, lsl #1
    1d68:	1affffe5 	bne	1d04 <__aeabi_dmul+0x1ac>
    1d6c:	e0211003 	eor	r1, r1, r3
    1d70:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1d74:	e3a00000 	mov	r0, #0
    1d78:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d7c:	e12fff1e 	bx	lr
    1d80:	e1906081 	orrs	r6, r0, r1, lsl #1
    1d84:	01a00002 	moveq	r0, r2
    1d88:	01a01003 	moveq	r1, r3
    1d8c:	11926083 	orrsne	r6, r2, r3, lsl #1
    1d90:	0a000010 	beq	1dd8 <__aeabi_dmul+0x280>
    1d94:	e134000c 	teq	r4, r12
    1d98:	1a000001 	bne	1da4 <__aeabi_dmul+0x24c>
    1d9c:	e1906601 	orrs	r6, r0, r1, lsl #12
    1da0:	1a00000c 	bne	1dd8 <__aeabi_dmul+0x280>
    1da4:	e135000c 	teq	r5, r12
    1da8:	1a000003 	bne	1dbc <__aeabi_dmul+0x264>
    1dac:	e1926603 	orrs	r6, r2, r3, lsl #12
    1db0:	11a00002 	movne	r0, r2
    1db4:	11a01003 	movne	r1, r3
    1db8:	1a000006 	bne	1dd8 <__aeabi_dmul+0x280>
    1dbc:	e0211003 	eor	r1, r1, r3
    1dc0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1dc4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1dc8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1dcc:	e3a00000 	mov	r0, #0
    1dd0:	e8bd4070 	pop	{r4, r5, r6, lr}
    1dd4:	e12fff1e 	bx	lr
    1dd8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1ddc:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1de0:	e8bd4070 	pop	{r4, r5, r6, lr}
    1de4:	e12fff1e 	bx	lr

00001de8 <__aeabi_ddiv>:
    1de8:	e92d4070 	push	{r4, r5, r6, lr}
    1dec:	e3a0c0ff 	mov	r12, #255	; 0xff
    1df0:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1df4:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1df8:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1dfc:	1134000c 	teqne	r4, r12
    1e00:	1135000c 	teqne	r5, r12
    1e04:	0b00005e 	bleq	1f84 <__aeabi_ddiv+0x19c>
    1e08:	e0444005 	sub	r4, r4, r5
    1e0c:	e021e003 	eor	lr, r1, r3
    1e10:	e1925603 	orrs	r5, r2, r3, lsl #12
    1e14:	e1a01601 	lsl	r1, r1, #12
    1e18:	0a00004c 	beq	1f50 <__aeabi_ddiv+0x168>
    1e1c:	e1a03603 	lsl	r3, r3, #12
    1e20:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1e24:	e1853223 	orr	r3, r5, r3, lsr #4
    1e28:	e1833c22 	orr	r3, r3, r2, lsr #24
    1e2c:	e1a02402 	lsl	r2, r2, #8
    1e30:	e1855221 	orr	r5, r5, r1, lsr #4
    1e34:	e1855c20 	orr	r5, r5, r0, lsr #24
    1e38:	e1a06400 	lsl	r6, r0, #8
    1e3c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1e40:	e1550003 	cmp	r5, r3
    1e44:	01560002 	cmpeq	r6, r2
    1e48:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1e4c:	e2844c03 	add	r4, r4, #768	; 0x300
    1e50:	2a000001 	bcs	1e5c <__aeabi_ddiv+0x74>
    1e54:	e1b030a3 	lsrs	r3, r3, #1
    1e58:	e1a02062 	rrx	r2, r2
    1e5c:	e0566002 	subs	r6, r6, r2
    1e60:	e0c55003 	sbc	r5, r5, r3
    1e64:	e1b030a3 	lsrs	r3, r3, #1
    1e68:	e1a02062 	rrx	r2, r2
    1e6c:	e3a00601 	mov	r0, #1048576	; 0x100000
    1e70:	e3a0c702 	mov	r12, #524288	; 0x80000
    1e74:	e056e002 	subs	lr, r6, r2
    1e78:	e0d5e003 	sbcs	lr, r5, r3
    1e7c:	20466002 	subcs	r6, r6, r2
    1e80:	21a0500e 	movcs	r5, lr
    1e84:	2180000c 	orrcs	r0, r0, r12
    1e88:	e1b030a3 	lsrs	r3, r3, #1
    1e8c:	e1a02062 	rrx	r2, r2
    1e90:	e056e002 	subs	lr, r6, r2
    1e94:	e0d5e003 	sbcs	lr, r5, r3
    1e98:	20466002 	subcs	r6, r6, r2
    1e9c:	21a0500e 	movcs	r5, lr
    1ea0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1ea4:	e1b030a3 	lsrs	r3, r3, #1
    1ea8:	e1a02062 	rrx	r2, r2
    1eac:	e056e002 	subs	lr, r6, r2
    1eb0:	e0d5e003 	sbcs	lr, r5, r3
    1eb4:	20466002 	subcs	r6, r6, r2
    1eb8:	21a0500e 	movcs	r5, lr
    1ebc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1ec0:	e1b030a3 	lsrs	r3, r3, #1
    1ec4:	e1a02062 	rrx	r2, r2
    1ec8:	e056e002 	subs	lr, r6, r2
    1ecc:	e0d5e003 	sbcs	lr, r5, r3
    1ed0:	20466002 	subcs	r6, r6, r2
    1ed4:	21a0500e 	movcs	r5, lr
    1ed8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1edc:	e195e006 	orrs	lr, r5, r6
    1ee0:	0a00000d 	beq	1f1c <__aeabi_ddiv+0x134>
    1ee4:	e1a05205 	lsl	r5, r5, #4
    1ee8:	e1855e26 	orr	r5, r5, r6, lsr #28
    1eec:	e1a06206 	lsl	r6, r6, #4
    1ef0:	e1a03183 	lsl	r3, r3, #3
    1ef4:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1ef8:	e1a02182 	lsl	r2, r2, #3
    1efc:	e1b0c22c 	lsrs	r12, r12, #4
    1f00:	1affffdb 	bne	1e74 <__aeabi_ddiv+0x8c>
    1f04:	e3110601 	tst	r1, #1048576	; 0x100000
    1f08:	1a000006 	bne	1f28 <__aeabi_ddiv+0x140>
    1f0c:	e1811000 	orr	r1, r1, r0
    1f10:	e3a00000 	mov	r0, #0
    1f14:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1f18:	eaffffd5 	b	1e74 <__aeabi_ddiv+0x8c>
    1f1c:	e3110601 	tst	r1, #1048576	; 0x100000
    1f20:	01811000 	orreq	r1, r1, r0
    1f24:	03a00000 	moveq	r0, #0
    1f28:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1f2c:	835c0c07 	cmphi	r12, #1792	; 0x700
    1f30:	8affff43 	bhi	1c44 <__aeabi_dmul+0xec>
    1f34:	e055c003 	subs	r12, r5, r3
    1f38:	0056c002 	subseq	r12, r6, r2
    1f3c:	01b0c0a0 	lsrseq	r12, r0, #1
    1f40:	e2b00000 	adcs	r0, r0, #0
    1f44:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1f48:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f4c:	e12fff1e 	bx	lr
    1f50:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1f54:	e18e1621 	orr	r1, lr, r1, lsr #12
    1f58:	e09440ac 	adds	r4, r4, r12, lsr #1
    1f5c:	c074500c 	rsbsgt	r5, r4, r12
    1f60:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1f64:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1f68:	c12fff1e 	bxgt	lr
    1f6c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1f70:	e3a0e000 	mov	lr, #0
    1f74:	e2544001 	subs	r4, r4, #1
    1f78:	eaffff31 	b	1c44 <__aeabi_dmul+0xec>
    1f7c:	e185e006 	orr	lr, r5, r6
    1f80:	eaffff2f 	b	1c44 <__aeabi_dmul+0xec>
    1f84:	e00c5a23 	and	r5, r12, r3, lsr #20
    1f88:	e134000c 	teq	r4, r12
    1f8c:	0135000c 	teqeq	r5, r12
    1f90:	0affff90 	beq	1dd8 <__aeabi_dmul+0x280>
    1f94:	e134000c 	teq	r4, r12
    1f98:	1a000006 	bne	1fb8 <__aeabi_ddiv+0x1d0>
    1f9c:	e1904601 	orrs	r4, r0, r1, lsl #12
    1fa0:	1affff8c 	bne	1dd8 <__aeabi_dmul+0x280>
    1fa4:	e135000c 	teq	r5, r12
    1fa8:	1affff83 	bne	1dbc <__aeabi_dmul+0x264>
    1fac:	e1a00002 	mov	r0, r2
    1fb0:	e1a01003 	mov	r1, r3
    1fb4:	eaffff87 	b	1dd8 <__aeabi_dmul+0x280>
    1fb8:	e135000c 	teq	r5, r12
    1fbc:	1a000004 	bne	1fd4 <__aeabi_ddiv+0x1ec>
    1fc0:	e1925603 	orrs	r5, r2, r3, lsl #12
    1fc4:	0affff68 	beq	1d6c <__aeabi_dmul+0x214>
    1fc8:	e1a00002 	mov	r0, r2
    1fcc:	e1a01003 	mov	r1, r3
    1fd0:	eaffff80 	b	1dd8 <__aeabi_dmul+0x280>
    1fd4:	e1906081 	orrs	r6, r0, r1, lsl #1
    1fd8:	11926083 	orrsne	r6, r2, r3, lsl #1
    1fdc:	1affff48 	bne	1d04 <__aeabi_dmul+0x1ac>
    1fe0:	e1904081 	orrs	r4, r0, r1, lsl #1
    1fe4:	1affff74 	bne	1dbc <__aeabi_dmul+0x264>
    1fe8:	e1925083 	orrs	r5, r2, r3, lsl #1
    1fec:	1affff5e 	bne	1d6c <__aeabi_dmul+0x214>
    1ff0:	eaffff78 	b	1dd8 <__aeabi_dmul+0x280>

00001ff4 <__aeabi_d2iz>:
    1ff4:	e1a02081 	lsl	r2, r1, #1
    1ff8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1ffc:	2a00000c 	bcs	2034 <__aeabi_d2iz+0x40>
    2000:	5a000009 	bpl	202c <__aeabi_d2iz+0x38>
    2004:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2008:	e0532ac2 	subs	r2, r3, r2, asr #21
    200c:	9a00000a 	bls	203c <__aeabi_d2iz+0x48>
    2010:	e1a03581 	lsl	r3, r1, #11
    2014:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2018:	e1833aa0 	orr	r3, r3, r0, lsr #21
    201c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2020:	e1a00233 	lsr	r0, r3, r2
    2024:	12600000 	rsbne	r0, r0, #0
    2028:	e12fff1e 	bx	lr
    202c:	e3a00000 	mov	r0, #0
    2030:	e12fff1e 	bx	lr
    2034:	e1900601 	orrs	r0, r0, r1, lsl #12
    2038:	1a000002 	bne	2048 <__aeabi_d2iz+0x54>
    203c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2040:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2044:	e12fff1e 	bx	lr
    2048:	e3a00000 	mov	r0, #0
    204c:	e12fff1e 	bx	lr

00002050 <atexit>:
    2050:	e1a01000 	mov	r1, r0
    2054:	e3a00000 	mov	r0, #0
    2058:	e92d4008 	push	{r3, lr}
    205c:	e1a02000 	mov	r2, r0
    2060:	e1a03000 	mov	r3, r0
    2064:	eb00005b 	bl	21d8 <__register_exitproc>
    2068:	e8bd4008 	pop	{r3, lr}
    206c:	e12fff1e 	bx	lr

00002070 <exit>:
    2070:	e92d4008 	push	{r3, lr}
    2074:	e3a01000 	mov	r1, #0
    2078:	e1a04000 	mov	r4, r0
    207c:	eb000092 	bl	22cc <__call_exitprocs>
    2080:	e59f3018 	ldr	r3, [pc, #24]	; 20a0 <exit+0x30>
    2084:	e5930000 	ldr	r0, [r3]
    2088:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    208c:	e3530000 	cmp	r3, #0
    2090:	11a0e00f 	movne	lr, pc
    2094:	112fff13 	bxne	r3
    2098:	e1a00004 	mov	r0, r4
    209c:	eb000116 	bl	24fc <_exit>
    20a0:	000025a4 	.word	0x000025a4

000020a4 <memset>:
    20a4:	e3520003 	cmp	r2, #3
    20a8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    20ac:	e20110ff 	and	r1, r1, #255	; 0xff
    20b0:	8a000008 	bhi	20d8 <memset+0x34>
    20b4:	e3520000 	cmp	r2, #0
    20b8:	0a000004 	beq	20d0 <memset+0x2c>
    20bc:	e1a03000 	mov	r3, r0
    20c0:	e0822000 	add	r2, r2, r0
    20c4:	e4c31001 	strb	r1, [r3], #1
    20c8:	e1530002 	cmp	r3, r2
    20cc:	1afffffc 	bne	20c4 <memset+0x20>
    20d0:	e8bd0010 	ldmfd	sp!, {r4}
    20d4:	e12fff1e 	bx	lr
    20d8:	e3100003 	tst	r0, #3
    20dc:	e0802002 	add	r2, r0, r2
    20e0:	0a000007 	beq	2104 <memset+0x60>
    20e4:	e280c001 	add	r12, r0, #1
    20e8:	e20c3003 	and	r3, r12, #3
    20ec:	e3530000 	cmp	r3, #0
    20f0:	e54c1001 	strb	r1, [r12, #-1]
    20f4:	e1a0300c 	mov	r3, r12
    20f8:	e28cc001 	add	r12, r12, #1
    20fc:	1afffff9 	bne	20e8 <memset+0x44>
    2100:	ea000000 	b	2108 <memset+0x64>
    2104:	e1a03000 	mov	r3, r0
    2108:	e0634002 	rsb	r4, r3, r2
    210c:	e081c401 	add	r12, r1, r1, lsl #8
    2110:	e354003f 	cmp	r4, #63	; 0x3f
    2114:	e08cc80c 	add	r12, r12, r12, lsl #16
    2118:	da00001a 	ble	2188 <memset+0xe4>
    211c:	e583c000 	str	r12, [r3]
    2120:	e583c004 	str	r12, [r3, #4]
    2124:	e583c008 	str	r12, [r3, #8]
    2128:	e583c00c 	str	r12, [r3, #12]
    212c:	e583c010 	str	r12, [r3, #16]
    2130:	e583c014 	str	r12, [r3, #20]
    2134:	e583c018 	str	r12, [r3, #24]
    2138:	e583c01c 	str	r12, [r3, #28]
    213c:	e583c020 	str	r12, [r3, #32]
    2140:	e583c024 	str	r12, [r3, #36]	; 0x24
    2144:	e583c028 	str	r12, [r3, #40]	; 0x28
    2148:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    214c:	e583c030 	str	r12, [r3, #48]	; 0x30
    2150:	e583c034 	str	r12, [r3, #52]	; 0x34
    2154:	e583c038 	str	r12, [r3, #56]	; 0x38
    2158:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    215c:	e2833040 	add	r3, r3, #64	; 0x40
    2160:	e0634002 	rsb	r4, r3, r2
    2164:	e354003f 	cmp	r4, #63	; 0x3f
    2168:	caffffeb 	bgt	211c <memset+0x78>
    216c:	ea000005 	b	2188 <memset+0xe4>
    2170:	e583c000 	str	r12, [r3]
    2174:	e583c004 	str	r12, [r3, #4]
    2178:	e583c008 	str	r12, [r3, #8]
    217c:	e583c00c 	str	r12, [r3, #12]
    2180:	e2833010 	add	r3, r3, #16
    2184:	e0634002 	rsb	r4, r3, r2
    2188:	e354000f 	cmp	r4, #15
    218c:	cafffff7 	bgt	2170 <memset+0xcc>
    2190:	e3540003 	cmp	r4, #3
    2194:	da000006 	ble	21b4 <memset+0x110>
    2198:	e2834004 	add	r4, r3, #4
    219c:	e0643002 	rsb	r3, r4, r2
    21a0:	e3530003 	cmp	r3, #3
    21a4:	e504c004 	str	r12, [r4, #-4]
    21a8:	e1a03004 	mov	r3, r4
    21ac:	e2844004 	add	r4, r4, #4
    21b0:	cafffff9 	bgt	219c <memset+0xf8>
    21b4:	e1520003 	cmp	r2, r3
    21b8:	9affffc4 	bls	20d0 <memset+0x2c>
    21bc:	e2833001 	add	r3, r3, #1
    21c0:	e2822001 	add	r2, r2, #1
    21c4:	e5431001 	strb	r1, [r3, #-1]
    21c8:	e2833001 	add	r3, r3, #1
    21cc:	e1530002 	cmp	r3, r2
    21d0:	1afffffb 	bne	21c4 <memset+0x120>
    21d4:	eaffffbd 	b	20d0 <memset+0x2c>

000021d8 <__register_exitproc>:
    21d8:	e59fc0e4 	ldr	r12, [pc, #228]	; 22c4 <__register_exitproc+0xec>
    21dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    21e0:	e59c4000 	ldr	r4, [r12]
    21e4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    21e8:	e35c0000 	cmp	r12, #0
    21ec:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    21f0:	e59c5004 	ldr	r5, [r12, #4]
    21f4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    21f8:	e355001f 	cmp	r5, #31
    21fc:	e24dd010 	sub	sp, sp, #16
    2200:	e1a06000 	mov	r6, r0
    2204:	da000015 	ble	2260 <__register_exitproc+0x88>
    2208:	e59f00b8 	ldr	r0, [pc, #184]	; 22c8 <__register_exitproc+0xf0>
    220c:	e3500000 	cmp	r0, #0
    2210:	1a000001 	bne	221c <__register_exitproc+0x44>
    2214:	e3e00000 	mvn	r0, #0
    2218:	ea000018 	b	2280 <__register_exitproc+0xa8>
    221c:	e3a00e19 	mov	r0, #400	; 0x190
    2220:	e58d100c 	str	r1, [sp, #12]
    2224:	e58d2008 	str	r2, [sp, #8]
    2228:	e58d3004 	str	r3, [sp, #4]
    222c:	e320f000 	nop	{0}
    2230:	e250c000 	subs	r12, r0, #0
    2234:	e59d100c 	ldr	r1, [sp, #12]
    2238:	e59d2008 	ldr	r2, [sp, #8]
    223c:	e59d3004 	ldr	r3, [sp, #4]
    2240:	0afffff3 	beq	2214 <__register_exitproc+0x3c>
    2244:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2248:	e3a00000 	mov	r0, #0
    224c:	e58c0004 	str	r0, [r12, #4]
    2250:	e58c5000 	str	r5, [r12]
    2254:	e584c148 	str	r12, [r4, #328]	; 0x148
    2258:	e58c0188 	str	r0, [r12, #392]	; 0x188
    225c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2260:	e3560000 	cmp	r6, #0
    2264:	e59c4004 	ldr	r4, [r12, #4]
    2268:	1a000007 	bne	228c <__register_exitproc+0xb4>
    226c:	e2843002 	add	r3, r4, #2
    2270:	e2844001 	add	r4, r4, #1
    2274:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2278:	e58c4004 	str	r4, [r12, #4]
    227c:	e3a00000 	mov	r0, #0
    2280:	e28dd010 	add	sp, sp, #16
    2284:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2288:	e12fff1e 	bx	lr
    228c:	e3a00001 	mov	r0, #1
    2290:	e1a00410 	lsl	r0, r0, r4
    2294:	e08c8104 	add	r8, r12, r4, lsl #2
    2298:	e3560002 	cmp	r6, #2
    229c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    22a0:	e5883108 	str	r3, [r8, #264]	; 0x108
    22a4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    22a8:	e1877000 	orr	r7, r7, r0
    22ac:	01830000 	orreq	r0, r3, r0
    22b0:	e1a05008 	mov	r5, r8
    22b4:	e5882088 	str	r2, [r8, #136]	; 0x88
    22b8:	e58c7188 	str	r7, [r12, #392]	; 0x188
    22bc:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    22c0:	eaffffe9 	b	226c <__register_exitproc+0x94>
    22c4:	000025a4 	.word	0x000025a4
    22c8:	00000000 	.word	0x00000000

000022cc <__call_exitprocs>:
    22cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    22d0:	e59f3168 	ldr	r3, [pc, #360]	; 2440 <__call_exitprocs+0x174>
    22d4:	e5933000 	ldr	r3, [r3]
    22d8:	e24dd014 	sub	sp, sp, #20
    22dc:	e58d3004 	str	r3, [sp, #4]
    22e0:	e2833f52 	add	r3, r3, #328	; 0x148
    22e4:	e58d0008 	str	r0, [sp, #8]
    22e8:	e58d300c 	str	r3, [sp, #12]
    22ec:	e1a07001 	mov	r7, r1
    22f0:	e3a08001 	mov	r8, #1
    22f4:	e59d3004 	ldr	r3, [sp, #4]
    22f8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    22fc:	e3560000 	cmp	r6, #0
    2300:	e59db00c 	ldr	r11, [sp, #12]
    2304:	0a000033 	beq	23d8 <__call_exitprocs+0x10c>
    2308:	e5965004 	ldr	r5, [r6, #4]
    230c:	e2554001 	subs	r4, r5, #1
    2310:	5286a088 	addpl	r10, r6, #136	; 0x88
    2314:	5285501f 	addpl	r5, r5, #31
    2318:	508a5105 	addpl	r5, r10, r5, lsl #2
    231c:	5a000007 	bpl	2340 <__call_exitprocs+0x74>
    2320:	ea000029 	b	23cc <__call_exitprocs+0x100>
    2324:	e5953000 	ldr	r3, [r5]
    2328:	e1530007 	cmp	r3, r7
    232c:	0a000005 	beq	2348 <__call_exitprocs+0x7c>
    2330:	e2444001 	sub	r4, r4, #1
    2334:	e3740001 	cmn	r4, #1
    2338:	e2455004 	sub	r5, r5, #4
    233c:	0a000022 	beq	23cc <__call_exitprocs+0x100>
    2340:	e3570000 	cmp	r7, #0
    2344:	1afffff6 	bne	2324 <__call_exitprocs+0x58>
    2348:	e5963004 	ldr	r3, [r6, #4]
    234c:	e06a2005 	rsb	r2, r10, r5
    2350:	e2433001 	sub	r3, r3, #1
    2354:	e0862002 	add	r2, r6, r2
    2358:	e1530004 	cmp	r3, r4
    235c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2360:	13a01000 	movne	r1, #0
    2364:	05864004 	streq	r4, [r6, #4]
    2368:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    236c:	e3530000 	cmp	r3, #0
    2370:	0affffee 	beq	2330 <__call_exitprocs+0x64>
    2374:	e1a02418 	lsl	r2, r8, r4
    2378:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    237c:	e1120001 	tst	r2, r1
    2380:	e5969004 	ldr	r9, [r6, #4]
    2384:	0a000016 	beq	23e4 <__call_exitprocs+0x118>
    2388:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    238c:	e1120001 	tst	r2, r1
    2390:	1a000016 	bne	23f0 <__call_exitprocs+0x124>
    2394:	e59d0008 	ldr	r0, [sp, #8]
    2398:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    239c:	e1a0e00f 	mov	lr, pc
    23a0:	e12fff13 	bx	r3
    23a4:	e5963004 	ldr	r3, [r6, #4]
    23a8:	e1530009 	cmp	r3, r9
    23ac:	1affffd0 	bne	22f4 <__call_exitprocs+0x28>
    23b0:	e59b3000 	ldr	r3, [r11]
    23b4:	e1530006 	cmp	r3, r6
    23b8:	1affffcd 	bne	22f4 <__call_exitprocs+0x28>
    23bc:	e2444001 	sub	r4, r4, #1
    23c0:	e3740001 	cmn	r4, #1
    23c4:	e2455004 	sub	r5, r5, #4
    23c8:	1affffdc 	bne	2340 <__call_exitprocs+0x74>
    23cc:	e59f1070 	ldr	r1, [pc, #112]	; 2444 <__call_exitprocs+0x178>
    23d0:	e3510000 	cmp	r1, #0
    23d4:	1a000009 	bne	2400 <__call_exitprocs+0x134>
    23d8:	e28dd014 	add	sp, sp, #20
    23dc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    23e0:	e12fff1e 	bx	lr
    23e4:	e1a0e00f 	mov	lr, pc
    23e8:	e12fff13 	bx	r3
    23ec:	eaffffec 	b	23a4 <__call_exitprocs+0xd8>
    23f0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    23f4:	e1a0e00f 	mov	lr, pc
    23f8:	e12fff13 	bx	r3
    23fc:	eaffffe8 	b	23a4 <__call_exitprocs+0xd8>
    2400:	e5963004 	ldr	r3, [r6, #4]
    2404:	e3530000 	cmp	r3, #0
    2408:	e5963000 	ldr	r3, [r6]
    240c:	1a000008 	bne	2434 <__call_exitprocs+0x168>
    2410:	e3530000 	cmp	r3, #0
    2414:	0a000006 	beq	2434 <__call_exitprocs+0x168>
    2418:	e1a00006 	mov	r0, r6
    241c:	e58b3000 	str	r3, [r11]
    2420:	e320f000 	nop	{0}
    2424:	e59b6000 	ldr	r6, [r11]
    2428:	e3560000 	cmp	r6, #0
    242c:	1affffb5 	bne	2308 <__call_exitprocs+0x3c>
    2430:	eaffffe8 	b	23d8 <__call_exitprocs+0x10c>
    2434:	e1a0b006 	mov	r11, r6
    2438:	e1a06003 	mov	r6, r3
    243c:	eafffff9 	b	2428 <__call_exitprocs+0x15c>
    2440:	000025a4 	.word	0x000025a4
    2444:	00000000 	.word	0x00000000

00002448 <register_fini>:
    2448:	e92d4008 	push	{r3, lr}
    244c:	e59f3010 	ldr	r3, [pc, #16]	; 2464 <register_fini+0x1c>
    2450:	e3530000 	cmp	r3, #0
    2454:	159f000c 	ldrne	r0, [pc, #12]	; 2468 <register_fini+0x20>
    2458:	1bfffefc 	blne	2050 <atexit>
    245c:	e8bd4008 	pop	{r3, lr}
    2460:	e12fff1e 	bx	lr
    2464:	000025cc 	.word	0x000025cc
    2468:	0000246c 	.word	0x0000246c

0000246c <__libc_fini_array>:
    246c:	e92d4038 	push	{r3, r4, r5, lr}
    2470:	e59f5030 	ldr	r5, [pc, #48]	; 24a8 <__libc_fini_array+0x3c>
    2474:	e59f4030 	ldr	r4, [pc, #48]	; 24ac <__libc_fini_array+0x40>
    2478:	e0654004 	rsb	r4, r5, r4
    247c:	e1b04144 	asrs	r4, r4, #2
    2480:	10855104 	addne	r5, r5, r4, lsl #2
    2484:	0a000004 	beq	249c <__libc_fini_array+0x30>
    2488:	e5353004 	ldr	r3, [r5, #-4]!
    248c:	e1a0e00f 	mov	lr, pc
    2490:	e12fff13 	bx	r3
    2494:	e2544001 	subs	r4, r4, #1
    2498:	1afffffa 	bne	2488 <__libc_fini_array+0x1c>
    249c:	eb00004a 	bl	25cc <__libc_fini>
    24a0:	e8bd4038 	pop	{r3, r4, r5, lr}
    24a4:	e12fff1e 	bx	lr
    24a8:	000025e4 	.word	0x000025e4
    24ac:	000025e8 	.word	0x000025e8

000024b0 <__cs3_premain>:
    24b0:	e92d4008 	push	{r3, lr}
    24b4:	eb000017 	bl	2518 <__libc_init_array>
    24b8:	e59f3030 	ldr	r3, [pc, #48]	; 24f0 <__cs3_premain+0x40>
    24bc:	e3530000 	cmp	r3, #0
    24c0:	15930000 	ldrne	r0, [r3]
    24c4:	01a00003 	moveq	r0, r3
    24c8:	e59f3024 	ldr	r3, [pc, #36]	; 24f4 <__cs3_premain+0x44>
    24cc:	e3530000 	cmp	r3, #0
    24d0:	15931000 	ldrne	r1, [r3]
    24d4:	01a01003 	moveq	r1, r3
    24d8:	e3a02000 	mov	r2, #0
    24dc:	ebfff894 	bl	734 <main>
    24e0:	e59f3010 	ldr	r3, [pc, #16]	; 24f8 <__cs3_premain+0x48>
    24e4:	e3530000 	cmp	r3, #0
    24e8:	1bfffee0 	blne	2070 <exit>
    24ec:	eafffffe 	b	24ec <__cs3_premain+0x3c>
	...
    24f8:	00002070 	.word	0x00002070

000024fc <_exit>:
    24fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2500:	e3a00018 	mov	r0, #24
    2504:	e59f1004 	ldr	r1, [pc, #4]	; 2510 <_exit+0x14>
    2508:	ef123456 	svc	0x00123456
    250c:	eafffffe 	b	250c <_exit+0x10>
    2510:	00020026 	.word	0x00020026

00002514 <__cs3_isr_interrupt>:
    2514:	eafffffe 	b	2514 <__cs3_isr_interrupt>

00002518 <__libc_init_array>:
    2518:	e92d4070 	push	{r4, r5, r6, lr}
    251c:	e59f506c 	ldr	r5, [pc, #108]	; 2590 <__libc_init_array+0x78>
    2520:	e59f606c 	ldr	r6, [pc, #108]	; 2594 <__libc_init_array+0x7c>
    2524:	e0656006 	rsb	r6, r5, r6
    2528:	e1b06146 	asrs	r6, r6, #2
    252c:	12455004 	subne	r5, r5, #4
    2530:	13a04000 	movne	r4, #0
    2534:	0a000005 	beq	2550 <__libc_init_array+0x38>
    2538:	e5b53004 	ldr	r3, [r5, #4]!
    253c:	e2844001 	add	r4, r4, #1
    2540:	e1a0e00f 	mov	lr, pc
    2544:	e12fff13 	bx	r3
    2548:	e1560004 	cmp	r6, r4
    254c:	1afffff9 	bne	2538 <__libc_init_array+0x20>
    2550:	e59f5040 	ldr	r5, [pc, #64]	; 2598 <__libc_init_array+0x80>
    2554:	e59f6040 	ldr	r6, [pc, #64]	; 259c <__libc_init_array+0x84>
    2558:	e0656006 	rsb	r6, r5, r6
    255c:	eb000012 	bl	25ac <_init>
    2560:	e1b06146 	asrs	r6, r6, #2
    2564:	12455004 	subne	r5, r5, #4
    2568:	13a04000 	movne	r4, #0
    256c:	0a000005 	beq	2588 <__libc_init_array+0x70>
    2570:	e5b53004 	ldr	r3, [r5, #4]!
    2574:	e2844001 	add	r4, r4, #1
    2578:	e1a0e00f 	mov	lr, pc
    257c:	e12fff13 	bx	r3
    2580:	e1560004 	cmp	r6, r4
    2584:	1afffff9 	bne	2570 <__libc_init_array+0x58>
    2588:	e8bd4070 	pop	{r4, r5, r6, lr}
    258c:	e12fff1e 	bx	lr
    2590:	000025c4 	.word	0x000025c4
    2594:	000025c4 	.word	0x000025c4
    2598:	000025c4 	.word	0x000025c4
    259c:	000025cc 	.word	0x000025cc

Disassembly of section .rodata:

000025a4 <_global_impure_ptr>:
    25a4:	00031458 00000043                       X...C...

000025ac <_init>:
    25ac:	e1a0c00d 	mov	r12, sp
    25b0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    25b4:	e24cb004 	sub	r11, r12, #4
    25b8:	e24bd028 	sub	sp, r11, #40	; 0x28
    25bc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    25c0:	e12fff1e 	bx	lr

000025c4 <__init_array_start>:
    25c4:	00002448 	.word	0x00002448

000025c8 <__frame_dummy_init_array_entry>:
    25c8:	00000208                                ....

000025cc <__libc_fini>:
    25cc:	e1a0c00d 	mov	r12, sp
    25d0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    25d4:	e24cb004 	sub	r11, r12, #4
    25d8:	e24bd028 	sub	sp, r11, #40	; 0x28
    25dc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    25e0:	e12fff1e 	bx	lr

000025e4 <__fini_array_start>:
    25e4:	000001c4 	.word	0x000001c4

000025e8 <__cs3_regions>:
	...
    25f4:	00031888 	.word	0x00031888
    25f8:	00000040 	.word	0x00000040

000025fc <__cs3_regions_end>:
    25fc:	00000000 	.word	0x00000000
